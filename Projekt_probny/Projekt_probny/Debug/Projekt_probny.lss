
Projekt_probny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001580  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00001580  00001634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000089  008000c2  008000c2  00001696  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  00001696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000169e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000e8  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f43  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d5d  00000000  00000000  00004737  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001587  00000000  00000000  00005494  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006b8  00000000  00000000  00006a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009a7  00000000  00000000  000070d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017e0  00000000  00000000  00007a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000925b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__vector_1>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__vector_11>
      30:	0c 94 56 06 	jmp	0xcac	; 0xcac <__vector_12>
      34:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__vector_13>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_19>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	39 07       	cpc	r19, r25
      56:	45 07       	cpc	r20, r21
      58:	51 07       	cpc	r21, r17
      5a:	5d 07       	cpc	r21, r29
      5c:	69 07       	cpc	r22, r25
      5e:	75 07       	cpc	r23, r21
      60:	81 07       	cpc	r24, r17
      62:	9e 07       	cpc	r25, r30
      64:	aa 07       	cpc	r26, r26
      66:	b6 07       	cpc	r27, r22
      68:	c2 07       	cpc	r28, r18
      6a:	ce 07       	cpc	r28, r30
      6c:	da 07       	cpc	r29, r26
      6e:	e6 07       	cpc	r30, r22
      70:	f2 07       	cpc	r31, r18
      72:	fe 07       	cpc	r31, r30
      74:	0a 08       	sbc	r0, r10
      76:	16 08       	sbc	r1, r6
      78:	22 08       	sbc	r2, r2

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf e5       	ldi	r28, 0x5F	; 95
      80:	d4 e0       	ldi	r29, 0x04	; 4
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	10 e0       	ldi	r17, 0x00	; 0
      88:	a0 e6       	ldi	r26, 0x60	; 96
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	e0 e8       	ldi	r30, 0x80	; 128
      8e:	f5 e1       	ldi	r31, 0x15	; 21
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	a2 3c       	cpi	r26, 0xC2	; 194
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	21 e0       	ldi	r18, 0x01	; 1
      9e:	a2 ec       	ldi	r26, 0xC2	; 194
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	ab 34       	cpi	r26, 0x4B	; 75
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 17 09 	call	0x122e	; 0x122e <main>
      b0:	0c 94 be 0a 	jmp	0x157c	; 0x157c <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <EI2C_write_buf>:
#include "../I2C/I2C.h"
#include "24C64.h"

// zapis danych do pamiêci EEPROM
void EI2C_write_buf(uint8_t device, uint32_t subAddr, uint32_t len, uint8_t *buf)
{
      b8:	af 92       	push	r10
      ba:	bf 92       	push	r11
      bc:	cf 92       	push	r12
      be:	df 92       	push	r13
      c0:	ef 92       	push	r14
      c2:	ff 92       	push	r15
      c4:	0f 93       	push	r16
      c6:	1f 93       	push	r17
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	00 d0       	rcall	.+0      	; 0xce <EI2C_write_buf+0x16>
      ce:	00 d0       	rcall	.+0      	; 0xd0 <EI2C_write_buf+0x18>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	57 01       	movw	r10, r14
      d6:	6a 01       	movw	r12, r20
      d8:	7b 01       	movw	r14, r22
      da:	c0 0e       	add	r12, r16
      dc:	d1 1e       	adc	r13, r17
      de:	e2 1e       	adc	r14, r18
      e0:	f3 1e       	adc	r15, r19

	while (len--) {
		TWI_start();
		TWI_write(device | (DEV_SEL << 1) );
      e2:	18 2f       	mov	r17, r24
      e4:	1e 60       	ori	r17, 0x0E	; 14

// zapis danych do pamiêci EEPROM
void EI2C_write_buf(uint8_t device, uint32_t subAddr, uint32_t len, uint8_t *buf)
{

	while (len--) {
      e6:	4c 15       	cp	r20, r12
      e8:	5d 05       	cpc	r21, r13
      ea:	6e 05       	cpc	r22, r14
      ec:	7f 05       	cpc	r23, r15
      ee:	39 f1       	breq	.+78     	; 0x13e <EI2C_write_buf+0x86>
		TWI_start();
      f0:	49 83       	std	Y+1, r20	; 0x01
      f2:	5a 83       	std	Y+2, r21	; 0x02
      f4:	6b 83       	std	Y+3, r22	; 0x03
      f6:	7c 83       	std	Y+4, r23	; 0x04
      f8:	0e 94 15 01 	call	0x22a	; 0x22a <TWI_start>
		TWI_write(device | (DEV_SEL << 1) );
      fc:	81 2f       	mov	r24, r17
      fe:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
		TWI_write((subAddr & 0xFF00) >> 8);
     102:	5a 81       	ldd	r21, Y+2	; 0x02
     104:	85 2f       	mov	r24, r21
     106:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
		TWI_write(subAddr & 0x00FF);
     10a:	49 81       	ldd	r20, Y+1	; 0x01
     10c:	84 2f       	mov	r24, r20
     10e:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
		TWI_write(*buf++);
     112:	f5 01       	movw	r30, r10
     114:	81 91       	ld	r24, Z+
     116:	5f 01       	movw	r10, r30
     118:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
		TWI_stop();
     11c:	0e 94 1b 01 	call	0x236	; 0x236 <TWI_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     120:	8f e1       	ldi	r24, 0x1F	; 31
     122:	9e e4       	ldi	r25, 0x4E	; 78
     124:	01 97       	sbiw	r24, 0x01	; 1
     126:	f1 f7       	brne	.-4      	; 0x124 <EI2C_write_buf+0x6c>
     128:	00 c0       	rjmp	.+0      	; 0x12a <EI2C_write_buf+0x72>
     12a:	00 00       	nop
		_delay_ms(5); // oczekiwanie na zapis
		subAddr++;
     12c:	49 81       	ldd	r20, Y+1	; 0x01
     12e:	5a 81       	ldd	r21, Y+2	; 0x02
     130:	6b 81       	ldd	r22, Y+3	; 0x03
     132:	7c 81       	ldd	r23, Y+4	; 0x04
     134:	4f 5f       	subi	r20, 0xFF	; 255
     136:	5f 4f       	sbci	r21, 0xFF	; 255
     138:	6f 4f       	sbci	r22, 0xFF	; 255
     13a:	7f 4f       	sbci	r23, 0xFF	; 255
     13c:	d4 cf       	rjmp	.-88     	; 0xe6 <EI2C_write_buf+0x2e>
	}


}
     13e:	0f 90       	pop	r0
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	1f 91       	pop	r17
     14c:	0f 91       	pop	r16
     14e:	ff 90       	pop	r15
     150:	ef 90       	pop	r14
     152:	df 90       	pop	r13
     154:	cf 90       	pop	r12
     156:	bf 90       	pop	r11
     158:	af 90       	pop	r10
     15a:	08 95       	ret

0000015c <EI2C_read_buf>:

// odczyt danych z pamiêci EEPROM
void EI2C_read_buf(uint8_t device, uint32_t subAddr, uint32_t len, uint8_t *buf)
{
     15c:	8f 92       	push	r8
     15e:	9f 92       	push	r9
     160:	af 92       	push	r10
     162:	bf 92       	push	r11
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	00 d0       	rcall	.+0      	; 0x172 <EI2C_read_buf+0x16>
     172:	00 d0       	rcall	.+0      	; 0x174 <EI2C_read_buf+0x18>
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	4a 01       	movw	r8, r20
     17a:	5b 01       	movw	r10, r22
     17c:	80 0e       	add	r8, r16
     17e:	91 1e       	adc	r9, r17
     180:	a2 1e       	adc	r10, r18
     182:	b3 1e       	adc	r11, r19

	while (len--) {
		TWI_start();

		TWI_write(device | (DEV_SEL << 1));
     184:	18 2f       	mov	r17, r24
     186:	1e 60       	ori	r17, 0x0E	; 14
		TWI_write((subAddr & 0xFF00) >> 8);
		TWI_write(subAddr & 0x00FF);

		TWI_start();
		TWI_write(device | (DEV_SEL << 1) | 0x01);		
     188:	08 2f       	mov	r16, r24
     18a:	0f 60       	ori	r16, 0x0F	; 15

// odczyt danych z pamiêci EEPROM
void EI2C_read_buf(uint8_t device, uint32_t subAddr, uint32_t len, uint8_t *buf)
{

	while (len--) {
     18c:	48 15       	cp	r20, r8
     18e:	59 05       	cpc	r21, r9
     190:	6a 05       	cpc	r22, r10
     192:	7b 05       	cpc	r23, r11
     194:	41 f1       	breq	.+80     	; 0x1e6 <EI2C_read_buf+0x8a>
		TWI_start();
     196:	49 83       	std	Y+1, r20	; 0x01
     198:	5a 83       	std	Y+2, r21	; 0x02
     19a:	6b 83       	std	Y+3, r22	; 0x03
     19c:	7c 83       	std	Y+4, r23	; 0x04
     19e:	0e 94 15 01 	call	0x22a	; 0x22a <TWI_start>

		TWI_write(device | (DEV_SEL << 1));
     1a2:	81 2f       	mov	r24, r17
     1a4:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
		TWI_write((subAddr & 0xFF00) >> 8);
     1a8:	5a 81       	ldd	r21, Y+2	; 0x02
     1aa:	85 2f       	mov	r24, r21
     1ac:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
		TWI_write(subAddr & 0x00FF);
     1b0:	49 81       	ldd	r20, Y+1	; 0x01
     1b2:	84 2f       	mov	r24, r20
     1b4:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>

		TWI_start();
     1b8:	0e 94 15 01 	call	0x22a	; 0x22a <TWI_start>
		TWI_write(device | (DEV_SEL << 1) | 0x01);		
     1bc:	80 2f       	mov	r24, r16
     1be:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
		TWI_read( NACK );
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 28 01 	call	0x250	; 0x250 <TWI_read>
		*buf++ = TWDR;
     1c8:	83 b1       	in	r24, 0x03	; 3
     1ca:	f7 01       	movw	r30, r14
     1cc:	81 93       	st	Z+, r24
     1ce:	7f 01       	movw	r14, r30

		TWI_stop();
     1d0:	0e 94 1b 01 	call	0x236	; 0x236 <TWI_stop>
		subAddr++;
     1d4:	49 81       	ldd	r20, Y+1	; 0x01
     1d6:	5a 81       	ldd	r21, Y+2	; 0x02
     1d8:	6b 81       	ldd	r22, Y+3	; 0x03
     1da:	7c 81       	ldd	r23, Y+4	; 0x04
     1dc:	4f 5f       	subi	r20, 0xFF	; 255
     1de:	5f 4f       	sbci	r21, 0xFF	; 255
     1e0:	6f 4f       	sbci	r22, 0xFF	; 255
     1e2:	7f 4f       	sbci	r23, 0xFF	; 255
     1e4:	d3 cf       	rjmp	.-90     	; 0x18c <EI2C_read_buf+0x30>
	}
}
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	ff 90       	pop	r15
     1f8:	ef 90       	pop	r14
     1fa:	bf 90       	pop	r11
     1fc:	af 90       	pop	r10
     1fe:	9f 90       	pop	r9
     200:	8f 90       	pop	r8
     202:	08 95       	ret

00000204 <i2cSetBitrate>:
#include "I2C.h"

uint8_t licznik_funkcji_wewnetrznych_i2c;


void i2cSetBitrate(uint32_t bitrateKHz) {
     204:	9b 01       	movw	r18, r22
     206:	ac 01       	movw	r20, r24
	uint8_t bitrate_div;

	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
     208:	60 e8       	ldi	r22, 0x80	; 128
     20a:	7e e3       	ldi	r23, 0x3E	; 62
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 13 0a 	call	0x1426	; 0x1426 <__udivmodsi4>
     214:	82 2f       	mov	r24, r18
	if(bitrate_div >= 16)
     216:	20 31       	cpi	r18, 0x10	; 16
     218:	30 f0       	brcs	.+12     	; 0x226 <i2cSetBitrate+0x22>
	bitrate_div = (bitrate_div-16)/2;
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	20 51       	subi	r18, 0x10	; 16
     21e:	31 09       	sbc	r19, r1
     220:	35 95       	asr	r19
     222:	27 95       	ror	r18
     224:	82 2f       	mov	r24, r18

	TWBR = bitrate_div;
     226:	80 b9       	out	0x00, r24	; 0
     228:	08 95       	ret

0000022a <TWI_start>:
}

void TWI_start(void) {
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
     22a:	84 ea       	ldi	r24, 0xA4	; 164
     22c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR&(1<<TWINT)));
     22e:	06 b6       	in	r0, 0x36	; 54
     230:	07 fe       	sbrs	r0, 7
     232:	fd cf       	rjmp	.-6      	; 0x22e <TWI_start+0x4>
}
     234:	08 95       	ret

00000236 <TWI_stop>:

void TWI_stop(void) {
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     236:	84 e9       	ldi	r24, 0x94	; 148
     238:	86 bf       	out	0x36, r24	; 54
	while ( (TWCR&(1<<TWSTO)));
     23a:	06 b6       	in	r0, 0x36	; 54
     23c:	04 fc       	sbrc	r0, 4
     23e:	fd cf       	rjmp	.-6      	; 0x23a <TWI_stop+0x4>
}
     240:	08 95       	ret

00000242 <TWI_write>:

void TWI_write(uint8_t bajt) {
	TWDR = bajt;
     242:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
     244:	84 e8       	ldi	r24, 0x84	; 132
     246:	86 bf       	out	0x36, r24	; 54
	while ( !(TWCR&(1<<TWINT)));
     248:	06 b6       	in	r0, 0x36	; 54
     24a:	07 fe       	sbrs	r0, 7
     24c:	fd cf       	rjmp	.-6      	; 0x248 <TWI_write+0x6>
}
     24e:	08 95       	ret

00000250 <TWI_read>:

void TWI_read(uint8_t ack) {
	TWCR = (1<<TWINT)|(ack<<TWEA)|(1<<TWEN);
     250:	20 e4       	ldi	r18, 0x40	; 64
     252:	82 9f       	mul	r24, r18
     254:	c0 01       	movw	r24, r0
     256:	11 24       	eor	r1, r1
     258:	84 68       	ori	r24, 0x84	; 132
     25a:	86 bf       	out	0x36, r24	; 54
	while ( !(TWCR & (1<<TWINT)));
     25c:	06 b6       	in	r0, 0x36	; 54
     25e:	07 fe       	sbrs	r0, 7
     260:	fd cf       	rjmp	.-6      	; 0x25c <TWI_read+0xc>
}
     262:	08 95       	ret

00000264 <TWI_write_buf>:

void TWI_write_buf( uint8_t SLA, uint8_t adr, uint8_t len, uint8_t *buf ) {
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	1f 93       	push	r17
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	00 d0       	rcall	.+0      	; 0x270 <TWI_write_buf+0xc>
     270:	00 d0       	rcall	.+0      	; 0x272 <TWI_write_buf+0xe>
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	12 2f       	mov	r17, r18

	TWI_start();
     278:	3c 83       	std	Y+4, r19	; 0x04
     27a:	4b 83       	std	Y+3, r20	; 0x03
     27c:	6a 83       	std	Y+2, r22	; 0x02
     27e:	89 83       	std	Y+1, r24	; 0x01
     280:	0e 94 15 01 	call	0x22a	; 0x22a <TWI_start>
	TWI_write(SLA);
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
	TWI_write(adr);
     28a:	6a 81       	ldd	r22, Y+2	; 0x02
     28c:	86 2f       	mov	r24, r22
     28e:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
	while (len--) TWI_write(*buf++);
     292:	e1 2e       	mov	r14, r17
     294:	3c 81       	ldd	r19, Y+4	; 0x04
     296:	f3 2e       	mov	r15, r19
     298:	4b 81       	ldd	r20, Y+3	; 0x03
     29a:	14 0f       	add	r17, r20
     29c:	1e 15       	cp	r17, r14
     29e:	31 f0       	breq	.+12     	; 0x2ac <TWI_write_buf+0x48>
     2a0:	f7 01       	movw	r30, r14
     2a2:	81 91       	ld	r24, Z+
     2a4:	7f 01       	movw	r14, r30
     2a6:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
     2aa:	f8 cf       	rjmp	.-16     	; 0x29c <TWI_write_buf+0x38>
	TWI_stop();
}
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14

	TWI_start();
	TWI_write(SLA);
	TWI_write(adr);
	while (len--) TWI_write(*buf++);
	TWI_stop();
     2be:	0c 94 1b 01 	jmp	0x236	; 0x236 <TWI_stop>

000002c2 <TWI_read_buf>:
}

void TWI_read_buf(uint8_t SLA, uint8_t adr, uint8_t len, uint8_t *buf) {
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <TWI_read_buf+0xc>
     2ce:	1f 92       	push	r1
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	18 2f       	mov	r17, r24
     2d6:	f4 2e       	mov	r15, r20

	TWI_start();
     2d8:	2a 83       	std	Y+2, r18	; 0x02
     2da:	3b 83       	std	Y+3, r19	; 0x03
     2dc:	69 83       	std	Y+1, r22	; 0x01
     2de:	0e 94 15 01 	call	0x22a	; 0x22a <TWI_start>
	TWI_write(SLA);
     2e2:	81 2f       	mov	r24, r17
     2e4:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
	TWI_write(adr);
     2e8:	69 81       	ldd	r22, Y+1	; 0x01
     2ea:	86 2f       	mov	r24, r22
     2ec:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
	TWI_start();
     2f0:	0e 94 15 01 	call	0x22a	; 0x22a <TWI_start>
	TWI_write(SLA + 1);
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	81 0f       	add	r24, r17
     2f8:	0e 94 21 01 	call	0x242	; 0x242 <TWI_write>
     2fc:	fa 94       	dec	r15
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	02 2f       	mov	r16, r18
     302:	3b 81       	ldd	r19, Y+3	; 0x03
     304:	13 2f       	mov	r17, r19
	while (len--)
     306:	ff ef       	ldi	r31, 0xFF	; 255
     308:	ff 16       	cp	r15, r31
     30a:	61 f0       	breq	.+24     	; 0x324 <TWI_read_buf+0x62>
	{ 
		TWI_read( len ? ACK : NACK );
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	f1 10       	cpse	r15, r1
     310:	01 c0       	rjmp	.+2      	; 0x314 <TWI_read_buf+0x52>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 28 01 	call	0x250	; 0x250 <TWI_read>
		*buf++ = TWDR;
     318:	83 b1       	in	r24, 0x03	; 3
     31a:	f8 01       	movw	r30, r16
     31c:	81 93       	st	Z+, r24
     31e:	8f 01       	movw	r16, r30
     320:	fa 94       	dec	r15
     322:	f1 cf       	rjmp	.-30     	; 0x306 <TWI_read_buf+0x44>
	}
	TWI_stop();
}
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
	while (len--)
	{ 
		TWI_read( len ? ACK : NACK );
		*buf++ = TWDR;
	}
	TWI_stop();
     334:	0c 94 1b 01 	jmp	0x236	; 0x236 <TWI_stop>

00000338 <KlawiaturaSkan>:
uint8_t KlawiaturaSkan(void)
{

	uint8_t rezultat=0;
	
	kolumny_dir =0b111;		//wymuszenie zer dla wszystkich kolumn,
     338:	84 b3       	in	r24, 0x14	; 20
     33a:	8c 61       	ori	r24, 0x1C	; 28
     33c:	84 bb       	out	0x14, r24	; 20
	wiersze_dir = 0b00;
     33e:	84 b3       	in	r24, 0x14	; 20
     340:	8f 79       	andi	r24, 0x9F	; 159
     342:	84 bb       	out	0x14, r24	; 20
	kolumny= 0b000;
     344:	85 b3       	in	r24, 0x15	; 21
     346:	83 7e       	andi	r24, 0xE3	; 227
     348:	85 bb       	out	0x15, r24	; 21
	wiersze= 0b11;
     34a:	85 b3       	in	r24, 0x15	; 21
     34c:	80 66       	ori	r24, 0x60	; 96
     34e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     350:	8a e0       	ldi	r24, 0x0A	; 10
     352:	8a 95       	dec	r24
     354:	f1 f7       	brne	.-4      	; 0x352 <KlawiaturaSkan+0x1a>
     356:	00 c0       	rjmp	.+0      	; 0x358 <KlawiaturaSkan+0x20>
	_delay_us(2);
	rezultat |= wiersze_pin<<4;			//odczy twierszy
     358:	23 b3       	in	r18, 0x13	; 19
     35a:	22 95       	swap	r18
     35c:	26 95       	lsr	r18
     35e:	23 70       	andi	r18, 0x03	; 3
     360:	80 e1       	ldi	r24, 0x10	; 16
     362:	28 9f       	mul	r18, r24
     364:	90 01       	movw	r18, r0
     366:	11 24       	eor	r1, r1
				
	kolumny_dir = 0b000;
     368:	84 b3       	in	r24, 0x14	; 20
     36a:	83 7e       	andi	r24, 0xE3	; 227
     36c:	84 bb       	out	0x14, r24	; 20
	wiersze_dir =0b11;		//wymuszenie zer dla wszystkich wierszy,
     36e:	84 b3       	in	r24, 0x14	; 20
     370:	80 66       	ori	r24, 0x60	; 96
     372:	84 bb       	out	0x14, r24	; 20
	kolumny= 0b111;
     374:	85 b3       	in	r24, 0x15	; 21
     376:	8c 61       	ori	r24, 0x1C	; 28
     378:	85 bb       	out	0x15, r24	; 21
	wiersze=0b00;
     37a:	85 b3       	in	r24, 0x15	; 21
     37c:	8f 79       	andi	r24, 0x9F	; 159
     37e:	85 bb       	out	0x15, r24	; 21
     380:	8a e0       	ldi	r24, 0x0A	; 10
     382:	8a 95       	dec	r24
     384:	f1 f7       	brne	.-4      	; 0x382 <KlawiaturaSkan+0x4a>
     386:	00 c0       	rjmp	.+0      	; 0x388 <KlawiaturaSkan+0x50>
	_delay_us(2);
	rezultat |= kolumny_pin; //odczyt kolumn i uzyskanie kodu skanowania
     388:	83 b3       	in	r24, 0x13	; 19
     38a:	86 95       	lsr	r24
     38c:	86 95       	lsr	r24
     38e:	87 70       	andi	r24, 0x07	; 7
     390:	28 2b       	or	r18, r24
	rezultat^=0x37;

	return rezultat;
}
     392:	87 e3       	ldi	r24, 0x37	; 55
     394:	82 27       	eor	r24, r18
     396:	08 95       	ret

00000398 <debouncer>:

uint8_t debouncer(uint8_t key)
{
     398:	98 2f       	mov	r25, r24
	static uint8_t stan=0;
	static uint32_t timer=0, offset_timer=0;
	static uint8_t key_old;

	switch(stan)
     39a:	80 91 cb 00 	lds	r24, 0x00CB
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	49 f1       	breq	.+82     	; 0x3f4 <debouncer+0x5c>
     3a2:	20 f0       	brcs	.+8      	; 0x3ac <debouncer+0x14>
     3a4:	82 30       	cpi	r24, 0x02	; 2
     3a6:	09 f4       	brne	.+2      	; 0x3aa <debouncer+0x12>
     3a8:	4a c0       	rjmp	.+148    	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     3aa:	4f c0       	rjmp	.+158    	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
	{
		case 0:
		{
			key_old=key;
     3ac:	90 93 ca 00 	sts	0x00CA, r25
			cli();
     3b0:	f8 94       	cli
			offset_timer=licznik;
     3b2:	40 91 12 01 	lds	r20, 0x0112
     3b6:	50 91 13 01 	lds	r21, 0x0113
     3ba:	60 91 14 01 	lds	r22, 0x0114
     3be:	70 91 15 01 	lds	r23, 0x0115
     3c2:	40 93 c6 00 	sts	0x00C6, r20
     3c6:	50 93 c7 00 	sts	0x00C7, r21
     3ca:	60 93 c8 00 	sts	0x00C8, r22
     3ce:	70 93 c9 00 	sts	0x00C9, r23
			timer=5000; //50ms + offset
     3d2:	48 e8       	ldi	r20, 0x88	; 136
     3d4:	53 e1       	ldi	r21, 0x13	; 19
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	40 93 c2 00 	sts	0x00C2, r20
     3de:	50 93 c3 00 	sts	0x00C3, r21
     3e2:	60 93 c4 00 	sts	0x00C4, r22
     3e6:	70 93 c5 00 	sts	0x00C5, r23
			sei();
     3ea:	78 94       	sei
			stan=1;
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	90 93 cb 00 	sts	0x00CB, r25
			return 0;
     3f2:	08 95       	ret
		}
		case 1:
		{
			if(timer<=licznik-offset_timer)
     3f4:	80 91 12 01 	lds	r24, 0x0112
     3f8:	90 91 13 01 	lds	r25, 0x0113
     3fc:	a0 91 14 01 	lds	r26, 0x0114
     400:	b0 91 15 01 	lds	r27, 0x0115
     404:	40 91 c6 00 	lds	r20, 0x00C6
     408:	50 91 c7 00 	lds	r21, 0x00C7
     40c:	60 91 c8 00 	lds	r22, 0x00C8
     410:	70 91 c9 00 	lds	r23, 0x00C9
     414:	84 1b       	sub	r24, r20
     416:	95 0b       	sbc	r25, r21
     418:	a6 0b       	sbc	r26, r22
     41a:	b7 0b       	sbc	r27, r23
     41c:	40 91 c2 00 	lds	r20, 0x00C2
     420:	50 91 c3 00 	lds	r21, 0x00C3
     424:	60 91 c4 00 	lds	r22, 0x00C4
     428:	70 91 c5 00 	lds	r23, 0x00C5
     42c:	84 17       	cp	r24, r20
     42e:	95 07       	cpc	r25, r21
     430:	a6 07       	cpc	r26, r22
     432:	b7 07       	cpc	r27, r23
     434:	50 f0       	brcs	.+20     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
			{
				stan=2;
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	80 93 cb 00 	sts	0x00CB, r24
     43c:	06 c0       	rjmp	.+12     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
			}
			return 0;
		}
		case 2:
		{
			if(key_old!=key)
     43e:	80 91 ca 00 	lds	r24, 0x00CA
     442:	89 17       	cp	r24, r25
     444:	19 f0       	breq	.+6      	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
			{
				stan=0;
     446:	10 92 cb 00 	sts	0x00CB, r1
		{
			if(timer<=licznik-offset_timer)
			{
				stan=2;
			}
			return 0;
     44a:	80 e0       	ldi	r24, 0x00	; 0
			}
			return 0;
		}
	}
	return 0;
     44c:	08 95       	ret

0000044e <data_dir_out>:
//		 Ustawienie wszystkich 4 linii danych jako WYjcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_out(void)
{
	DDR(LCD_D7PORT)	|= (1<<LCD_D7);
     44e:	d5 9a       	sbi	0x1a, 5	; 26
	DDR(LCD_D6PORT)	|= (1<<LCD_D6);
     450:	d4 9a       	sbi	0x1a, 4	; 26
	DDR(LCD_D5PORT)	|= (1<<LCD_D5);
     452:	d3 9a       	sbi	0x1a, 3	; 26
	DDR(LCD_D4PORT)	|= (1<<LCD_D4);
     454:	d2 9a       	sbi	0x1a, 2	; 26
     456:	08 95       	ret

00000458 <lcd_sendHalf>:
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
     458:	80 ff       	sbrs	r24, 0
     45a:	02 c0       	rjmp	.+4      	; 0x460 <__stack+0x1>
     45c:	da 9a       	sbi	0x1b, 2	; 27
     45e:	01 c0       	rjmp	.+2      	; 0x462 <__stack+0x3>
     460:	da 98       	cbi	0x1b, 2	; 27
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
     462:	81 ff       	sbrs	r24, 1
     464:	02 c0       	rjmp	.+4      	; 0x46a <__stack+0xb>
     466:	db 9a       	sbi	0x1b, 3	; 27
     468:	01 c0       	rjmp	.+2      	; 0x46c <__stack+0xd>
     46a:	db 98       	cbi	0x1b, 3	; 27
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
     46c:	82 ff       	sbrs	r24, 2
     46e:	02 c0       	rjmp	.+4      	; 0x474 <__stack+0x15>
     470:	dc 9a       	sbi	0x1b, 4	; 27
     472:	01 c0       	rjmp	.+2      	; 0x476 <__stack+0x17>
     474:	dc 98       	cbi	0x1b, 4	; 27
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
     476:	83 ff       	sbrs	r24, 3
     478:	02 c0       	rjmp	.+4      	; 0x47e <__stack+0x1f>
     47a:	dd 9a       	sbi	0x1b, 5	; 27
     47c:	08 95       	ret
     47e:	dd 98       	cbi	0x1b, 5	; 27
     480:	08 95       	ret

00000482 <_lcd_write_byte>:
//
//		 Zapis bajtu do wywietlacza LCD
//
//----------------------------------------------------------------------------------------
void _lcd_write_byte(unsigned char _data)
{
     482:	cf 93       	push	r28
     484:	c8 2f       	mov	r28, r24
	// Ustawienie pinów portu LCD D4..D7 jako wyjcia
	data_dir_out();
     486:	0e 94 27 02 	call	0x44e	; 0x44e <data_dir_out>

#if USE_RW == 1
	CLR_RW;
#endif

	SET_E;
     48a:	d9 9a       	sbi	0x1b, 1	; 27
	lcd_sendHalf(_data >> 4);			// wys³anie starszej czêci bajtu danych D7..D4
     48c:	8c 2f       	mov	r24, r28
     48e:	82 95       	swap	r24
     490:	8f 70       	andi	r24, 0x0F	; 15
     492:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_sendHalf>
	CLR_E;
     496:	d9 98       	cbi	0x1b, 1	; 27

	SET_E;
     498:	d9 9a       	sbi	0x1b, 1	; 27
	lcd_sendHalf(_data);				// wys³anie m³odszej czêci bajtu danych D3..D0
     49a:	8c 2f       	mov	r24, r28
     49c:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_sendHalf>
	CLR_E;
     4a0:	d9 98       	cbi	0x1b, 1	; 27
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	94 e0       	ldi	r25, 0x04	; 4
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <_lcd_write_byte+0x24>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <_lcd_write_byte+0x2a>
     4ac:	00 00       	nop
	while( (check_BF() & (1<<7)) );
#else
	_delay_us(320);
#endif

}
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <lcd_write_cmd>:
//		 Zapis komendy do wywietlacza LCD
//
//----------------------------------------------------------------------------------------
void lcd_write_cmd(uint8_t cmd)
{
	CLR_RS;
     4b2:	d8 98       	cbi	0x1b, 0	; 27
	_lcd_write_byte(cmd);
     4b4:	0c 94 41 02 	jmp	0x482	; 0x482 <_lcd_write_byte>

000004b8 <lcd_write_data>:
//		 Zapis danych do wywietlacza LCD
//
//----------------------------------------------------------------------------------------
void lcd_write_data(uint8_t data)
{
	SET_RS;
     4b8:	d8 9a       	sbi	0x1b, 0	; 27
	_lcd_write_byte(data);
     4ba:	0c 94 41 02 	jmp	0x482	; 0x482 <_lcd_write_byte>

000004be <lcd_char>:
//		 wysy³amy za pomoc¹ kodów 0x80 do 0x87 zamiast 0x00 do 0x07
//
//----------------------------------------------------------------------------------------
inline void lcd_char(char c)
{
	lcd_write_data( ( c>=0x80 && c<=0x87 ) ? (c & 0x07) : c);
     4be:	90 e8       	ldi	r25, 0x80	; 128
     4c0:	98 0f       	add	r25, r24
     4c2:	98 30       	cpi	r25, 0x08	; 8
     4c4:	08 f4       	brcc	.+2      	; 0x4c8 <lcd_char+0xa>
     4c6:	87 70       	andi	r24, 0x07	; 7
     4c8:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <lcd_write_data>

000004cc <lcd_str>:
//		 8 w³asnych znaków zdefiniowanych w CGRAM
//		 wysy³amy za pomoc¹ kodów 0x80 do 0x87 zamiast 0x00 do 0x07
//
//----------------------------------------------------------------------------------------
inline void lcd_str (char * str)
{
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	ec 01       	movw	r28, r24
	while (*str) lcd_char(*(str++));
     4d2:	89 91       	ld	r24, Y+
     4d4:	88 23       	and	r24, r24
     4d6:	19 f0       	breq	.+6      	; 0x4de <lcd_str+0x12>
     4d8:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
     4dc:	fa cf       	rjmp	.-12     	; 0x4d2 <lcd_str+0x6>
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <lcd_int>:
//
//		 Wywietla liczbê dziesiêtn¹ na wywietlaczu LCD
//
//----------------------------------------------------------------------------------------
void lcd_int(int val)
{
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	61 97       	sbiw	r28, 0x11	; 17
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     4f8:	4a e0       	ldi	r20, 0x0A	; 10
     4fa:	be 01       	movw	r22, r28
     4fc:	6f 5f       	subi	r22, 0xFF	; 255
     4fe:	7f 4f       	sbci	r23, 0xFF	; 255
     500:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__itoa_ncheck>
	char bufor[17];
	lcd_str( itoa(val, bufor, 10) );
     504:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
}
     508:	61 96       	adiw	r28, 0x11	; 17
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <lcd_hex>:
//
//		 Wywietla liczbê szestnastkow¹ HEX na wywietlaczu LCD
//
//----------------------------------------------------------------------------------------
void lcd_hex(int val)
{
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	61 97       	sbiw	r28, 0x11	; 17
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	40 e1       	ldi	r20, 0x10	; 16
     530:	be 01       	movw	r22, r28
     532:	6f 5f       	subi	r22, 0xFF	; 255
     534:	7f 4f       	sbci	r23, 0xFF	; 255
     536:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__itoa_ncheck>
	char bufor[17];
	lcd_str( itoa(val, bufor, 16) );
     53a:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
}
     53e:	61 96       	adiw	r28, 0x11	; 17
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <lcd_locate>:
//		w zale¿noci od rodzaju wywietlacza (ile posiada wierszy)
//
//----------------------------------------------------------------------------------------
void lcd_locate(uint8_t y, uint8_t x)
{
	switch(y)
     550:	82 30       	cpi	r24, 0x02	; 2
     552:	31 f0       	breq	.+12     	; 0x560 <lcd_locate+0x10>
     554:	83 30       	cpi	r24, 0x03	; 3
     556:	31 f0       	breq	.+12     	; 0x564 <lcd_locate+0x14>
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	29 f4       	brne	.+10     	; 0x566 <lcd_locate+0x16>
	{
		case 0: y = LCD_LINE1; break;

	    case 1: y = LCD_LINE2; break; // adres 1 znaku 2 wiersza
     55c:	80 e4       	ldi	r24, 0x40	; 64
     55e:	03 c0       	rjmp	.+6      	; 0x566 <lcd_locate+0x16>

    	case 2: y = LCD_LINE3; break; // adres 1 znaku 3 wiersza
     560:	80 e1       	ldi	r24, 0x10	; 16
     562:	01 c0       	rjmp	.+2      	; 0x566 <lcd_locate+0x16>

    	case 3: y = LCD_LINE4; break; // adres 1 znaku 4 wiersza
     564:	80 e5       	ldi	r24, 0x50	; 80
     566:	60 58       	subi	r22, 0x80	; 128
	}

	lcd_write_cmd( (0x80 + y + x) );
     568:	86 0f       	add	r24, r22
     56a:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <lcd_write_cmd>

0000056e <lcd_cls>:
//		Kasowanie ekranu wywietlacza
//
//----------------------------------------------------------------------------------------
void lcd_cls(void)
{
	lcd_write_cmd( LCDC_CLS );
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     574:	8f e8       	ldi	r24, 0x8F	; 143
     576:	9c e4       	ldi	r25, 0x4C	; 76
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <lcd_cls+0xa>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <lcd_cls+0x10>
     57e:	00 00       	nop
     580:	08 95       	ret

00000582 <lcd_home>:
//		Powrót kursora na pocz¹tek
//
//----------------------------------------------------------------------------------------
void lcd_home(void)
{
	lcd_write_cmd( LCDC_CLS|LCDC_HOME );
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_write_cmd>
     588:	8f e8       	ldi	r24, 0x8F	; 143
     58a:	9c e4       	ldi	r25, 0x4C	; 76
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <lcd_home+0xa>
     590:	00 c0       	rjmp	.+0      	; 0x592 <lcd_home+0x10>
     592:	00 00       	nop
     594:	08 95       	ret

00000596 <lcd_cursor_on>:
//		W³¹czenie kursora na LCD
//
//----------------------------------------------------------------------------------------
void lcd_cursor_on(void)
{
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON|LCDC_CURSORON);
     596:	8e e0       	ldi	r24, 0x0E	; 14
     598:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <lcd_write_cmd>

0000059c <lcd_cursor_off>:
//		Wy³¹czenie kursora na LCD
//
//----------------------------------------------------------------------------------------
void lcd_cursor_off(void)
{
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON);
     59c:	8c e0       	ldi	r24, 0x0C	; 12
     59e:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <lcd_write_cmd>

000005a2 <lcd_blink_on>:
//		W£¹cza miganie kursora na LCD
//
//----------------------------------------------------------------------------------------
void lcd_blink_on(void)
{
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON|LCDC_CURSORON|LCDC_BLINKON);
     5a2:	8f e0       	ldi	r24, 0x0F	; 15
     5a4:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <lcd_write_cmd>

000005a8 <lcd_blink_off>:
//		WY³¹cza miganie kursora na LCD
//
//----------------------------------------------------------------------------------------
void lcd_blink_off(void)
{
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON);
     5a8:	8c e0       	ldi	r24, 0x0C	; 12
     5aa:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <lcd_write_cmd>

000005ae <lcd_init>:
//----------------------------------------------------------------------------------------
void lcd_init(void)
{
	// inicjowanie pinów portów ustalonych do pod³¹czenia z wywietlaczem LCD
	// ustawienie wszystkich jako wyjcia
	data_dir_out();
     5ae:	0e 94 27 02 	call	0x44e	; 0x44e <data_dir_out>
	DDR(LCD_RSPORT) |= (1<<LCD_RS);
     5b2:	d0 9a       	sbi	0x1a, 0	; 26
	DDR(LCD_EPORT) |= (1<<LCD_E);
     5b4:	d1 9a       	sbi	0x1a, 1	; 26
	DDR(LCD_BLPORT) |= (1<<LCD_BL);
     5b6:	d6 9a       	sbi	0x1a, 6	; 26
	#if USE_RW == 1
		DDR(LCD_RWPORT) |= (1<<LCD_RW);
	#endif

	PORT(LCD_RSPORT) |= (1<<LCD_RS);
     5b8:	d8 9a       	sbi	0x1b, 0	; 27
	PORT(LCD_EPORT) |= (1<<LCD_E);
     5ba:	d9 9a       	sbi	0x1b, 1	; 27
     5bc:	8f e5       	ldi	r24, 0x5F	; 95
     5be:	9a ee       	ldi	r25, 0xEA	; 234
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <lcd_init+0x12>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <lcd_init+0x18>
     5c6:	00 00       	nop
	#if USE_RW == 1
		PORT(LCD_RWPORT) |= (1<<LCD_RW);
	#endif

	_delay_ms(15);
	PORT(LCD_EPORT) &= ~(1<<LCD_E);
     5c8:	d9 98       	cbi	0x1b, 1	; 27
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
     5ca:	d8 98       	cbi	0x1b, 0	; 27
	#if USE_RW == 1
    	PORT(LCD_RWPORT) &= ~(1<<LCD_RW);
	#endif

	// jeszcze nie mo¿na u¿ywaæ Busy Flag
	SET_E;
     5cc:	d9 9a       	sbi	0x1b, 1	; 27
	lcd_sendHalf(0x03);	// tryb 8-bitowy
     5ce:	83 e0       	ldi	r24, 0x03	; 3
     5d0:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_sendHalf>
	CLR_E;
     5d4:	d9 98       	cbi	0x1b, 1	; 27
     5d6:	8f e0       	ldi	r24, 0x0F	; 15
     5d8:	90 e4       	ldi	r25, 0x40	; 64
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <lcd_init+0x2c>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <lcd_init+0x32>
     5e0:	00 00       	nop
	_delay_ms(4.1);

	SET_E;
     5e2:	d9 9a       	sbi	0x1b, 1	; 27
	lcd_sendHalf(0x03);	// tryb 8-bitowy
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_sendHalf>
	CLR_E;
     5ea:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ec:	8f e8       	ldi	r24, 0x8F	; 143
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <lcd_init+0x42>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <lcd_init+0x48>
     5f6:	00 00       	nop
	_delay_us(100);

	SET_E;
     5f8:	d9 9a       	sbi	0x1b, 1	; 27
	lcd_sendHalf(0x03);	// tryb 8-bitowy
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_sendHalf>
	CLR_E;
     600:	d9 98       	cbi	0x1b, 1	; 27
     602:	8f e8       	ldi	r24, 0x8F	; 143
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	f1 f7       	brne	.-4      	; 0x606 <lcd_init+0x58>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <lcd_init+0x5e>
     60c:	00 00       	nop
	_delay_us(100);

	SET_E;
     60e:	d9 9a       	sbi	0x1b, 1	; 27
	lcd_sendHalf(0x02);// tryb 4-bitowy
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_sendHalf>
	CLR_E;
     616:	d9 98       	cbi	0x1b, 1	; 27
     618:	8f e8       	ldi	r24, 0x8F	; 143
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <lcd_init+0x6e>
     620:	00 c0       	rjmp	.+0      	; 0x622 <lcd_init+0x74>
     622:	00 00       	nop
	_delay_us(100);

	// ju¿ mo¿na u¿ywaæ Busy Flag
	// tryb 4-bitowy, 2 wiersze, znak 5x7
	lcd_write_cmd( LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7 );
     624:	88 e2       	ldi	r24, 0x28	; 40
     626:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_write_cmd>
	// wy³¹czenie kursora
	lcd_write_cmd( LCDC_ONOFF|LCDC_CURSOROFF );
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_write_cmd>
	// w³¹czenie wywietlacza
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON );
     630:	8c e0       	ldi	r24, 0x0C	; 12
     632:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_write_cmd>
	// przesuwanie kursora w prawo bez przesuwania zawartoci ekranu
	lcd_write_cmd( LCDC_ENTRY|LCDC_ENTRYR );
     636:	86 e0       	ldi	r24, 0x06	; 6
     638:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_write_cmd>
	//lcd_write_cmd( LCDC_SHIFT|LCDC_SHIFTR );
	// kasowanie ekranu
	lcd_cls();
     63c:	0c 94 b7 02 	jmp	0x56e	; 0x56e <lcd_cls>

00000640 <M1_func_ustawienia>:
				break;
	}
}

void M1_func_ustawienia(char *str)
{
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
	if(Flagi.flaga_lcd)
     64c:	20 91 0a 01 	lds	r18, 0x010A
     650:	20 ff       	sbrs	r18, 0
     652:	1f c0       	rjmp	.+62     	; 0x692 <M1_func_ustawienia+0x52>
     654:	ec 01       	movw	r28, r24
	{
		lcd_locate(0, 0);
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
		lcd_str(str);
     65e:	ce 01       	movw	r24, r28
     660:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
		EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, empty), SIZEOF (EXT_EEPROM_var, empty), (uint8_t *)str);
     664:	7e 01       	movw	r14, r28
     666:	01 e1       	ldi	r16, 0x11	; 17
     668:	10 e0       	ldi	r17, 0x00	; 0
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	ba 01       	movw	r22, r20
     674:	80 ea       	ldi	r24, 0xA0	; 160
     676:	0e 94 ae 00 	call	0x15c	; 0x15c <EI2C_read_buf>
		lcd_locate(1, 0);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
		lcd_str(str);
     682:	ce 01       	movw	r24, r28
     684:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
		Flagi.flaga_lcd=0;
     688:	80 91 0a 01 	lds	r24, 0x010A
     68c:	8e 7f       	andi	r24, 0xFE	; 254
     68e:	80 93 0a 01 	sts	0x010A, r24
	}

}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	08 95       	ret

000006a0 <M10_func_ustawienia_data>:
void M10_func_ustawienia_data(char *str)
{
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
	static uint8_t state=0;
	static uint32_t cnt=0, offset_cnt=0;
	if(Flagi.flaga_lcd)
     6ac:	20 91 0a 01 	lds	r18, 0x010A
     6b0:	20 ff       	sbrs	r18, 0
     6b2:	22 c0       	rjmp	.+68     	; 0x6f8 <M10_func_ustawienia_data+0x58>
     6b4:	ec 01       	movw	r28, r24
	{
		lcd_locate(0, 10);
     6b6:	6a e0       	ldi	r22, 0x0A	; 10
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
		lcd_char(0x7E);
     6be:	8e e7       	ldi	r24, 0x7E	; 126
     6c0:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
		lcd_str(str);
     6c4:	ce 01       	movw	r24, r28
     6c6:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
		EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, empty), SIZEOF (EXT_EEPROM_var, empty), (uint8_t *)str);
     6ca:	7e 01       	movw	r14, r28
     6cc:	01 e1       	ldi	r16, 0x11	; 17
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	ba 01       	movw	r22, r20
     6da:	80 ea       	ldi	r24, 0xA0	; 160
     6dc:	0e 94 ae 00 	call	0x15c	; 0x15c <EI2C_read_buf>
		lcd_locate(1, 0);
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
		lcd_str(str);
     6e8:	ce 01       	movw	r24, r28
     6ea:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
		Flagi.flaga_lcd=0;
     6ee:	80 91 0a 01 	lds	r24, 0x010A
     6f2:	8e 7f       	andi	r24, 0xFE	; 254
     6f4:	80 93 0a 01 	sts	0x010A, r24
	}
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	08 95       	ret

00000706 <M12_func_ustawienia_lcd>:
	if( czas.sekundy < 10 ) lcd_char('0');
	lcd_int(czas.sekundy);

}
void M12_func_ustawienia_lcd(char *str)
{
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
	if(Flagi.flaga_lcd)
     712:	20 91 0a 01 	lds	r18, 0x010A
     716:	20 ff       	sbrs	r18, 0
     718:	22 c0       	rjmp	.+68     	; 0x75e <M12_func_ustawienia_lcd+0x58>
     71a:	ec 01       	movw	r28, r24
	{
		lcd_locate(0, 10);
     71c:	6a e0       	ldi	r22, 0x0A	; 10
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
		lcd_char(0x7E);
     724:	8e e7       	ldi	r24, 0x7E	; 126
     726:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
		lcd_str(str);
     72a:	ce 01       	movw	r24, r28
     72c:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
		EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, empty), SIZEOF (EXT_EEPROM_var, empty), (uint8_t *)str);
     730:	7e 01       	movw	r14, r28
     732:	01 e1       	ldi	r16, 0x11	; 17
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	ba 01       	movw	r22, r20
     740:	80 ea       	ldi	r24, 0xA0	; 160
     742:	0e 94 ae 00 	call	0x15c	; 0x15c <EI2C_read_buf>
		lcd_locate(1, 0);
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
		lcd_str(str);
     74e:	ce 01       	movw	r24, r28
     750:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
		Flagi.flaga_lcd=0;
     754:	80 91 0a 01 	lds	r24, 0x010A
     758:	8e 7f       	andi	r24, 0xFE	; 254
     75a:	80 93 0a 01 	sts	0x010A, r24
	}
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	08 95       	ret

0000076c <__vector_1>:
EEMEM Data deafult_data={0x01, 0x05, 0x07, 0x16};
EEMEM Czas deafult_czas={0x00,0x00,0x09};
EEMEM Ustawienia deafult_flags ={1};
	
// procedura obs³ugi przerwania INT 0
ISR( INT0_vect ) {
     76c:	1f 92       	push	r1
     76e:	0f 92       	push	r0
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	0f 92       	push	r0
     774:	11 24       	eor	r1, r1
     776:	8f 93       	push	r24
	Flagi.flaga_rtc = 1;
     778:	80 91 0a 01 	lds	r24, 0x010A
     77c:	82 60       	ori	r24, 0x02	; 2
     77e:	80 93 0a 01 	sts	0x010A, r24
}
     782:	8f 91       	pop	r24
     784:	0f 90       	pop	r0
     786:	0f be       	out	0x3f, r0	; 63
     788:	0f 90       	pop	r0
     78a:	1f 90       	pop	r1
     78c:	18 95       	reti

0000078e <__vector_19>:

ISR(TIMER0_COMP_vect)
{
     78e:	1f 92       	push	r1
     790:	0f 92       	push	r0
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	0f 92       	push	r0
     796:	11 24       	eor	r1, r1
     798:	8f 93       	push	r24
     79a:	9f 93       	push	r25
     79c:	af 93       	push	r26
     79e:	bf 93       	push	r27
	licznik++;
     7a0:	80 91 12 01 	lds	r24, 0x0112
     7a4:	90 91 13 01 	lds	r25, 0x0113
     7a8:	a0 91 14 01 	lds	r26, 0x0114
     7ac:	b0 91 15 01 	lds	r27, 0x0115
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	a1 1d       	adc	r26, r1
     7b4:	b1 1d       	adc	r27, r1
     7b6:	80 93 12 01 	sts	0x0112, r24
     7ba:	90 93 13 01 	sts	0x0113, r25
     7be:	a0 93 14 01 	sts	0x0114, r26
     7c2:	b0 93 15 01 	sts	0x0115, r27
}
     7c6:	bf 91       	pop	r27
     7c8:	af 91       	pop	r26
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	0f 90       	pop	r0
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	0f 90       	pop	r0
     7d4:	1f 90       	pop	r1
     7d6:	18 95       	reti

000007d8 <fifo_bufor_lcd>:
		Flagi.flaga_lcd=0;
	}
}

void fifo_bufor_lcd(char *bufor, uint8_t iteracje, size_t rozmiar)
{
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	dc 01       	movw	r26, r24
	char buf;
	for (uint8_t cnt=0; cnt < iteracje; cnt ++)
     7de:	90 e0       	ldi	r25, 0x00	; 0
	{
		buf=bufor[0];
		for(uint8_t i=0; i < rozmiar-1; i++)
     7e0:	41 50       	subi	r20, 0x01	; 1
     7e2:	51 09       	sbc	r21, r1
		{
			bufor[i]=bufor[i+1];
		}	
		bufor[rozmiar-1]=buf;
     7e4:	ed 01       	movw	r28, r26
     7e6:	c4 0f       	add	r28, r20
     7e8:	d5 1f       	adc	r29, r21
}

void fifo_bufor_lcd(char *bufor, uint8_t iteracje, size_t rozmiar)
{
	char buf;
	for (uint8_t cnt=0; cnt < iteracje; cnt ++)
     7ea:	96 17       	cp	r25, r22
     7ec:	89 f0       	breq	.+34     	; 0x810 <fifo_bufor_lcd+0x38>
	{
		buf=bufor[0];
     7ee:	7c 91       	ld	r23, X
		for(uint8_t i=0; i < rozmiar-1; i++)
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	28 2f       	mov	r18, r24
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	24 17       	cp	r18, r20
     7f8:	35 07       	cpc	r19, r21
     7fa:	38 f4       	brcc	.+14     	; 0x80a <fifo_bufor_lcd+0x32>
		{
			bufor[i]=bufor[i+1];
     7fc:	fd 01       	movw	r30, r26
     7fe:	e2 0f       	add	r30, r18
     800:	f3 1f       	adc	r31, r19
     802:	21 81       	ldd	r18, Z+1	; 0x01
     804:	20 83       	st	Z, r18
{
	char buf;
	for (uint8_t cnt=0; cnt < iteracje; cnt ++)
	{
		buf=bufor[0];
		for(uint8_t i=0; i < rozmiar-1; i++)
     806:	8f 5f       	subi	r24, 0xFF	; 255
     808:	f4 cf       	rjmp	.-24     	; 0x7f2 <fifo_bufor_lcd+0x1a>
		{
			bufor[i]=bufor[i+1];
		}	
		bufor[rozmiar-1]=buf;
     80a:	78 83       	st	Y, r23
}

void fifo_bufor_lcd(char *bufor, uint8_t iteracje, size_t rozmiar)
{
	char buf;
	for (uint8_t cnt=0; cnt < iteracje; cnt ++)
     80c:	9f 5f       	subi	r25, 0xFF	; 255
     80e:	ed cf       	rjmp	.-38     	; 0x7ea <fifo_bufor_lcd+0x12>
		{
			bufor[i]=bufor[i+1];
		}	
		bufor[rozmiar-1]=buf;
	}
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <M0>:
    }
}

#if _EXT_EEPROM_EMPTY==0
void M0(char *str)
{	
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	ec 01       	movw	r28, r24
	static uint8_t state=0, i=0;
	static uint32_t cnt=0, offset_cnt=0;
	static char buf[41];
	if(Flagi.flaga_lcd)
     81c:	80 91 0a 01 	lds	r24, 0x010A
     820:	80 ff       	sbrs	r24, 0
     822:	13 c0       	rjmp	.+38     	; 0x84a <M0+0x34>
	{
		lcd_locate(0, 0);
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
		lcd_str(str);
     82c:	ce 01       	movw	r24, r28
     82e:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
		lcd_locate(1, 0);
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
		lcd_str(str);
     83a:	ce 01       	movw	r24, r28
     83c:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
		Flagi.flaga_lcd=0;
     840:	80 91 0a 01 	lds	r24, 0x010A
     844:	8e 7f       	andi	r24, 0xFE	; 254
     846:	80 93 0a 01 	sts	0x010A, r24
	}
	
	if(Flagi.flaga_rtc)
     84a:	80 91 0a 01 	lds	r24, 0x010A
     84e:	81 ff       	sbrs	r24, 1
     850:	0d c0       	rjmp	.+26     	; 0x86c <M0+0x56>
	{
		pobierz_czas(&czas);
     852:	8b e0       	ldi	r24, 0x0B	; 11
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 b9 08 	call	0x1172	; 0x1172 <pobierz_czas>
		pobierz_date(&data);
     85a:	8e e0       	ldi	r24, 0x0E	; 14
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <pobierz_date>
		Flagi.flaga_rtc=0;
     862:	80 91 0a 01 	lds	r24, 0x010A
     866:	8d 7f       	andi	r24, 0xFD	; 253
     868:	80 93 0a 01 	sts	0x010A, r24
	}

	lcd_locate(1,0);
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
	if( czas.godziny < 10 ) lcd_char('0');
     874:	80 91 0d 01 	lds	r24, 0x010D
     878:	8a 30       	cpi	r24, 0x0A	; 10
     87a:	18 f4       	brcc	.+6      	; 0x882 <M0+0x6c>
     87c:	80 e3       	ldi	r24, 0x30	; 48
     87e:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
	lcd_int(czas.godziny);
     882:	80 91 0d 01 	lds	r24, 0x010D
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_int>
	lcd_char(':');
     88c:	8a e3       	ldi	r24, 0x3A	; 58
     88e:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
	if( czas.minuty < 10 ) lcd_char('0');
     892:	80 91 0c 01 	lds	r24, 0x010C
     896:	8a 30       	cpi	r24, 0x0A	; 10
     898:	18 f4       	brcc	.+6      	; 0x8a0 <M0+0x8a>
     89a:	80 e3       	ldi	r24, 0x30	; 48
     89c:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
	lcd_int(czas.minuty);
     8a0:	80 91 0c 01 	lds	r24, 0x010C
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_int>
	lcd_char(':');
     8aa:	8a e3       	ldi	r24, 0x3A	; 58
     8ac:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
	if( czas.sekundy < 10 ) lcd_char('0');
     8b0:	80 91 0b 01 	lds	r24, 0x010B
     8b4:	8a 30       	cpi	r24, 0x0A	; 10
     8b6:	18 f4       	brcc	.+6      	; 0x8be <M0+0xa8>
     8b8:	80 e3       	ldi	r24, 0x30	; 48
     8ba:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
	lcd_int(czas.sekundy);
     8be:	80 91 0b 01 	lds	r24, 0x010B
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_int>
	
	switch(state)
     8c8:	80 91 09 01 	lds	r24, 0x0109
     8cc:	88 23       	and	r24, r24
     8ce:	21 f0       	breq	.+8      	; 0x8d8 <M0+0xc2>
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <M0+0xc0>
     8d4:	53 c0       	rjmp	.+166    	; 0x97c <M0+0x166>
     8d6:	7a c0       	rjmp	.+244    	; 0x9cc <M0+0x1b6>
	{
		case 0:
				state=1;
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	80 93 09 01 	sts	0x0109, r24
				
				if(i>= 2*strlen(buf))
     8de:	ef ed       	ldi	r30, 0xDF	; 223
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	01 90       	ld	r0, Z+
     8e4:	00 20       	and	r0, r0
     8e6:	e9 f7       	brne	.-6      	; 0x8e2 <M0+0xcc>
     8e8:	31 97       	sbiw	r30, 0x01	; 1
     8ea:	ef 5d       	subi	r30, 0xDF	; 223
     8ec:	f0 40       	sbci	r31, 0x00	; 0
     8ee:	80 91 08 01 	lds	r24, 0x0108
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	8e 17       	cp	r24, r30
     8fa:	9f 07       	cpc	r25, r31
     8fc:	10 f0       	brcs	.+4      	; 0x902 <M0+0xec>
					i=0;
     8fe:	10 92 08 01 	sts	0x0108, r1
				
				lcd_wyswietl_date(&data, buf, 0);
     902:	40 e0       	ldi	r20, 0x00	; 0
     904:	6f ed       	ldi	r22, 0xDF	; 223
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	8e e0       	ldi	r24, 0x0E	; 14
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	0e 94 15 07 	call	0xe2a	; 0xe2a <lcd_wyswietl_date>
				fifo_bufor_lcd(buf, i, strlen(buf));
     910:	ef ed       	ldi	r30, 0xDF	; 223
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	01 90       	ld	r0, Z+
     916:	00 20       	and	r0, r0
     918:	e9 f7       	brne	.-6      	; 0x914 <M0+0xfe>
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	af 01       	movw	r20, r30
     91e:	4f 5d       	subi	r20, 0xDF	; 223
     920:	50 40       	sbci	r21, 0x00	; 0
     922:	60 91 08 01 	lds	r22, 0x0108
     926:	8f ed       	ldi	r24, 0xDF	; 223
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <fifo_bufor_lcd>
				lcd_locate(1,8);
     92e:	68 e0       	ldi	r22, 0x08	; 8
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
				lcd_str(buf);
     936:	8f ed       	ldi	r24, 0xDF	; 223
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
				
				cli();
     93e:	f8 94       	cli
				cnt=25000;
     940:	88 ea       	ldi	r24, 0xA8	; 168
     942:	91 e6       	ldi	r25, 0x61	; 97
     944:	a0 e0       	ldi	r26, 0x00	; 0
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	80 93 db 00 	sts	0x00DB, r24
     94c:	90 93 dc 00 	sts	0x00DC, r25
     950:	a0 93 dd 00 	sts	0x00DD, r26
     954:	b0 93 de 00 	sts	0x00DE, r27
				offset_cnt=licznik;
     958:	80 91 12 01 	lds	r24, 0x0112
     95c:	90 91 13 01 	lds	r25, 0x0113
     960:	a0 91 14 01 	lds	r26, 0x0114
     964:	b0 91 15 01 	lds	r27, 0x0115
     968:	80 93 d7 00 	sts	0x00D7, r24
     96c:	90 93 d8 00 	sts	0x00D8, r25
     970:	a0 93 d9 00 	sts	0x00D9, r26
     974:	b0 93 da 00 	sts	0x00DA, r27
				sei();
     978:	78 94       	sei
				break;
     97a:	28 c0       	rjmp	.+80     	; 0x9cc <M0+0x1b6>
		case 1:
				if(cnt<=licznik-offset_cnt)
     97c:	80 91 12 01 	lds	r24, 0x0112
     980:	90 91 13 01 	lds	r25, 0x0113
     984:	a0 91 14 01 	lds	r26, 0x0114
     988:	b0 91 15 01 	lds	r27, 0x0115
     98c:	40 91 d7 00 	lds	r20, 0x00D7
     990:	50 91 d8 00 	lds	r21, 0x00D8
     994:	60 91 d9 00 	lds	r22, 0x00D9
     998:	70 91 da 00 	lds	r23, 0x00DA
     99c:	84 1b       	sub	r24, r20
     99e:	95 0b       	sbc	r25, r21
     9a0:	a6 0b       	sbc	r26, r22
     9a2:	b7 0b       	sbc	r27, r23
     9a4:	40 91 db 00 	lds	r20, 0x00DB
     9a8:	50 91 dc 00 	lds	r21, 0x00DC
     9ac:	60 91 dd 00 	lds	r22, 0x00DD
     9b0:	70 91 de 00 	lds	r23, 0x00DE
     9b4:	84 17       	cp	r24, r20
     9b6:	95 07       	cpc	r25, r21
     9b8:	a6 07       	cpc	r26, r22
     9ba:	b7 07       	cpc	r27, r23
     9bc:	38 f0       	brcs	.+14     	; 0x9cc <M0+0x1b6>
				{
					i++;
     9be:	80 91 08 01 	lds	r24, 0x0108
     9c2:	8f 5f       	subi	r24, 0xFF	; 255
     9c4:	80 93 08 01 	sts	0x0108, r24
					state=0;
     9c8:	10 92 09 01 	sts	0x0109, r1
				}
				break;
	}
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <M11_func_ustawienia_godzina>:
		lcd_str(str);
		Flagi.flaga_lcd=0;
	}
}
void M11_func_ustawienia_godzina(char *str)
{
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24
	static uint8_t i=0, j=0, edit=0;
	static uint8_t state[1]={0,0};
	static uint32_t cnt[1]={0,0}, offset_cnt[1]={0,0};
	
	if(Flagi.flaga_lcd)
     9e0:	80 91 0a 01 	lds	r24, 0x010A
     9e4:	80 ff       	sbrs	r24, 0
     9e6:	2e c0       	rjmp	.+92     	; 0xa44 <M11_func_ustawienia_godzina+0x72>
	{
		lcd_locate(0, 10);
     9e8:	6a e0       	ldi	r22, 0x0A	; 10
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
		lcd_char(0x7E);
     9f0:	8e e7       	ldi	r24, 0x7E	; 126
     9f2:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
		fifo_bufor_lcd(str,i,strlen(str));
     9f6:	fe 01       	movw	r30, r28
     9f8:	01 90       	ld	r0, Z+
     9fa:	00 20       	and	r0, r0
     9fc:	e9 f7       	brne	.-6      	; 0x9f8 <M11_func_ustawienia_godzina+0x26>
     9fe:	31 97       	sbiw	r30, 0x01	; 1
     a00:	af 01       	movw	r20, r30
     a02:	4c 1b       	sub	r20, r28
     a04:	5d 0b       	sbc	r21, r29
     a06:	60 91 d6 00 	lds	r22, 0x00D6
     a0a:	ce 01       	movw	r24, r28
     a0c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <fifo_bufor_lcd>
		lcd_str(str);
     a10:	ce 01       	movw	r24, r28
     a12:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
		EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, empty), SIZEOF (EXT_EEPROM_var, empty), (uint8_t *)str);
     a16:	7e 01       	movw	r14, r28
     a18:	01 e1       	ldi	r16, 0x11	; 17
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	ba 01       	movw	r22, r20
     a26:	80 ea       	ldi	r24, 0xA0	; 160
     a28:	0e 94 ae 00 	call	0x15c	; 0x15c <EI2C_read_buf>
		lcd_locate(1, 0);
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
		lcd_str(str);
     a34:	ce 01       	movw	r24, r28
     a36:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
		Flagi.flaga_lcd=0;
     a3a:	80 91 0a 01 	lds	r24, 0x010A
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	80 93 0a 01 	sts	0x010A, r24
	}

	switch(state[0])
     a44:	80 91 d5 00 	lds	r24, 0x00D5
     a48:	88 23       	and	r24, r24
     a4a:	21 f0       	breq	.+8      	; 0xa54 <M11_func_ustawienia_godzina+0x82>
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	09 f4       	brne	.+2      	; 0xa52 <M11_func_ustawienia_godzina+0x80>
     a50:	44 c0       	rjmp	.+136    	; 0xada <M11_func_ustawienia_godzina+0x108>
     a52:	66 c0       	rjmp	.+204    	; 0xb20 <M11_func_ustawienia_godzina+0x14e>
	{
		case 0:
			state[0]=1;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	80 93 d5 00 	sts	0x00D5, r24
			
			if(i>7)
     a5a:	80 91 d6 00 	lds	r24, 0x00D6
     a5e:	88 30       	cpi	r24, 0x08	; 8
     a60:	18 f0       	brcs	.+6      	; 0xa68 <M11_func_ustawienia_godzina+0x96>
				i=0;
     a62:	10 92 d6 00 	sts	0x00D6, r1
     a66:	03 c0       	rjmp	.+6      	; 0xa6e <M11_func_ustawienia_godzina+0x9c>
			else
				i++;
     a68:	8f 5f       	subi	r24, 0xFF	; 255
     a6a:	80 93 d6 00 	sts	0x00D6, r24

			lcd_locate(0, 10);
     a6e:	6a e0       	ldi	r22, 0x0A	; 10
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
			lcd_char(0x7E);
     a76:	8e e7       	ldi	r24, 0x7E	; 126
     a78:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
			fifo_bufor_lcd(str,i,strlen(str));
     a7c:	fe 01       	movw	r30, r28
     a7e:	01 90       	ld	r0, Z+
     a80:	00 20       	and	r0, r0
     a82:	e9 f7       	brne	.-6      	; 0xa7e <M11_func_ustawienia_godzina+0xac>
     a84:	31 97       	sbiw	r30, 0x01	; 1
     a86:	af 01       	movw	r20, r30
     a88:	4c 1b       	sub	r20, r28
     a8a:	5d 0b       	sbc	r21, r29
     a8c:	60 91 d6 00 	lds	r22, 0x00D6
     a90:	ce 01       	movw	r24, r28
     a92:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <fifo_bufor_lcd>
			lcd_str(str);
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_str>
				
			cli();
     a9c:	f8 94       	cli
			cnt[0]=25000;
     a9e:	88 ea       	ldi	r24, 0xA8	; 168
     aa0:	91 e6       	ldi	r25, 0x61	; 97
     aa2:	a0 e0       	ldi	r26, 0x00	; 0
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	80 93 d1 00 	sts	0x00D1, r24
     aaa:	90 93 d2 00 	sts	0x00D2, r25
     aae:	a0 93 d3 00 	sts	0x00D3, r26
     ab2:	b0 93 d4 00 	sts	0x00D4, r27
			offset_cnt[0]=licznik;
     ab6:	80 91 12 01 	lds	r24, 0x0112
     aba:	90 91 13 01 	lds	r25, 0x0113
     abe:	a0 91 14 01 	lds	r26, 0x0114
     ac2:	b0 91 15 01 	lds	r27, 0x0115
     ac6:	80 93 cd 00 	sts	0x00CD, r24
     aca:	90 93 ce 00 	sts	0x00CE, r25
     ace:	a0 93 cf 00 	sts	0x00CF, r26
     ad2:	b0 93 d0 00 	sts	0x00D0, r27
			sei();
     ad6:	78 94       	sei
			break;
     ad8:	23 c0       	rjmp	.+70     	; 0xb20 <M11_func_ustawienia_godzina+0x14e>
		case 1:
			if(cnt[0]<=licznik-offset_cnt[0])
     ada:	80 91 12 01 	lds	r24, 0x0112
     ade:	90 91 13 01 	lds	r25, 0x0113
     ae2:	a0 91 14 01 	lds	r26, 0x0114
     ae6:	b0 91 15 01 	lds	r27, 0x0115
     aea:	40 91 cd 00 	lds	r20, 0x00CD
     aee:	50 91 ce 00 	lds	r21, 0x00CE
     af2:	60 91 cf 00 	lds	r22, 0x00CF
     af6:	70 91 d0 00 	lds	r23, 0x00D0
     afa:	84 1b       	sub	r24, r20
     afc:	95 0b       	sbc	r25, r21
     afe:	a6 0b       	sbc	r26, r22
     b00:	b7 0b       	sbc	r27, r23
     b02:	40 91 d1 00 	lds	r20, 0x00D1
     b06:	50 91 d2 00 	lds	r21, 0x00D2
     b0a:	60 91 d3 00 	lds	r22, 0x00D3
     b0e:	70 91 d4 00 	lds	r23, 0x00D4
     b12:	84 17       	cp	r24, r20
     b14:	95 07       	cpc	r25, r21
     b16:	a6 07       	cpc	r26, r22
     b18:	b7 07       	cpc	r27, r23
     b1a:	10 f0       	brcs	.+4      	; 0xb20 <M11_func_ustawienia_godzina+0x14e>
			{
				state[0]=0;
     b1c:	10 92 d5 00 	sts	0x00D5, r1
			}
			break;
	}

	if (key_code == PRZYCISK_ENTER)
     b20:	80 91 16 01 	lds	r24, 0x0116
     b24:	82 31       	cpi	r24, 0x12	; 18
     b26:	59 f4       	brne	.+22     	; 0xb3e <M11_func_ustawienia_godzina+0x16c>
	{
		edit++;
     b28:	80 91 cc 00 	lds	r24, 0x00CC
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	80 93 cc 00 	sts	0x00CC, r24
		Flagi.flaga_klawiatura=0;
     b32:	80 91 0a 01 	lds	r24, 0x010A
     b36:	8b 7f       	andi	r24, 0xFB	; 251
     b38:	80 93 0a 01 	sts	0x010A, r24
     b3c:	32 c0       	rjmp	.+100    	; 0xba2 <M11_func_ustawienia_godzina+0x1d0>
	}
	else if (key_code == PRZYCISK_POWROT || Flagi.flaga_klawiatura==0)
     b3e:	81 31       	cpi	r24, 0x11	; 17
     b40:	21 f0       	breq	.+8      	; 0xb4a <M11_func_ustawienia_godzina+0x178>
     b42:	90 91 0a 01 	lds	r25, 0x010A
     b46:	92 fd       	sbrc	r25, 2
     b48:	0c c0       	rjmp	.+24     	; 0xb62 <M11_func_ustawienia_godzina+0x190>
	{
		edit=0;
     b4a:	10 92 cc 00 	sts	0x00CC, r1
		Flagi.flaga_klawiatura=1;
     b4e:	80 91 0a 01 	lds	r24, 0x010A
     b52:	84 60       	ori	r24, 0x04	; 4
     b54:	80 93 0a 01 	sts	0x010A, r24
		ustaw_czas(&czas);
     b58:	8b e0       	ldi	r24, 0x0B	; 11
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 b3 06 	call	0xd66	; 0xd66 <ustaw_czas>
     b60:	20 c0       	rjmp	.+64     	; 0xba2 <M11_func_ustawienia_godzina+0x1d0>
	}
	else if (key_code == PRZYCISK_DOL || Flagi.flaga_klawiatura==0)
     b62:	84 31       	cpi	r24, 0x14	; 20
     b64:	11 f0       	breq	.+4      	; 0xb6a <M11_func_ustawienia_godzina+0x198>
					if (czas.sekundy>59)
					czas.sekundy=0;
					break;					
		}
	}
	else if (key_code == PRZYCISK_GORA || Flagi.flaga_klawiatura==0)
     b66:	84 32       	cpi	r24, 0x24	; 36
     b68:	e1 f4       	brne	.+56     	; 0xba2 <M11_func_ustawienia_godzina+0x1d0>
	{
				switch(edit)
     b6a:	80 91 cc 00 	lds	r24, 0x00CC
     b6e:	82 30       	cpi	r24, 0x02	; 2
     b70:	39 f4       	brne	.+14     	; 0xb80 <M11_func_ustawienia_godzina+0x1ae>
					if (czas.godziny>23)
						czas.godziny=0;
					break;
			case 2:
					czas.minuty+1;
					if (czas.minuty>59)
     b72:	80 91 0c 01 	lds	r24, 0x010C
     b76:	8c 33       	cpi	r24, 0x3C	; 60
     b78:	a0 f0       	brcs	.+40     	; 0xba2 <M11_func_ustawienia_godzina+0x1d0>
					czas.minuty=0;
     b7a:	10 92 0c 01 	sts	0x010C, r1
     b7e:	11 c0       	rjmp	.+34     	; 0xba2 <M11_func_ustawienia_godzina+0x1d0>
					break;					
		}
	}
	else if (key_code == PRZYCISK_GORA || Flagi.flaga_klawiatura==0)
	{
				switch(edit)
     b80:	83 30       	cpi	r24, 0x03	; 3
     b82:	49 f0       	breq	.+18     	; 0xb96 <M11_func_ustawienia_godzina+0x1c4>
		Flagi.flaga_klawiatura=1;
		ustaw_czas(&czas);
	}
	else if (key_code == PRZYCISK_DOL || Flagi.flaga_klawiatura==0)
	{
		switch(edit)
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	69 f4       	brne	.+26     	; 0xba2 <M11_func_ustawienia_godzina+0x1d0>
		{
			case 1: 
					czas.godziny+1;
					if (czas.godziny>23)
     b88:	80 91 0d 01 	lds	r24, 0x010D
     b8c:	88 31       	cpi	r24, 0x18	; 24
     b8e:	48 f0       	brcs	.+18     	; 0xba2 <M11_func_ustawienia_godzina+0x1d0>
						czas.godziny=0;
     b90:	10 92 0d 01 	sts	0x010D, r1
     b94:	06 c0       	rjmp	.+12     	; 0xba2 <M11_func_ustawienia_godzina+0x1d0>
					if (czas.minuty>59)
					czas.minuty=0;
					break;
			case 3:
					czas.sekundy+1;
					if (czas.sekundy>59)
     b96:	80 91 0b 01 	lds	r24, 0x010B
     b9a:	8c 33       	cpi	r24, 0x3C	; 60
     b9c:	10 f0       	brcs	.+4      	; 0xba2 <M11_func_ustawienia_godzina+0x1d0>
					czas.sekundy=0;
     b9e:	10 92 0b 01 	sts	0x010B, r1
							czas.sekundy=0;
							break;
				}
	}
	
	lcd_locate(1,0);
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
	if( czas.godziny < 10 ) lcd_char('0');
     baa:	80 91 0d 01 	lds	r24, 0x010D
     bae:	8a 30       	cpi	r24, 0x0A	; 10
     bb0:	18 f4       	brcc	.+6      	; 0xbb8 <M11_func_ustawienia_godzina+0x1e6>
     bb2:	80 e3       	ldi	r24, 0x30	; 48
     bb4:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
	lcd_int(czas.godziny);
     bb8:	80 91 0d 01 	lds	r24, 0x010D
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_int>
	lcd_char(':');
     bc2:	8a e3       	ldi	r24, 0x3A	; 58
     bc4:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
	if( czas.minuty < 10 ) lcd_char('0');
     bc8:	80 91 0c 01 	lds	r24, 0x010C
     bcc:	8a 30       	cpi	r24, 0x0A	; 10
     bce:	18 f4       	brcc	.+6      	; 0xbd6 <M11_func_ustawienia_godzina+0x204>
     bd0:	80 e3       	ldi	r24, 0x30	; 48
     bd2:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
	lcd_int(czas.minuty);
     bd6:	80 91 0c 01 	lds	r24, 0x010C
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_int>
	lcd_char(':');
     be0:	8a e3       	ldi	r24, 0x3A	; 58
     be2:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
	if( czas.sekundy < 10 ) lcd_char('0');
     be6:	80 91 0b 01 	lds	r24, 0x010B
     bea:	8a 30       	cpi	r24, 0x0A	; 10
     bec:	18 f4       	brcc	.+6      	; 0xbf4 <M11_func_ustawienia_godzina+0x222>
     bee:	80 e3       	ldi	r24, 0x30	; 48
     bf0:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_char>
	lcd_int(czas.sekundy);
     bf4:	80 91 0b 01 	lds	r24, 0x010B
     bf8:	90 e0       	ldi	r25, 0x00	; 0

}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
	lcd_char(':');
	if( czas.minuty < 10 ) lcd_char('0');
	lcd_int(czas.minuty);
	lcd_char(':');
	if( czas.sekundy < 10 ) lcd_char('0');
	lcd_int(czas.sekundy);
     c06:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <lcd_int>

00000c0a <USART_Init>:



void USART_Init( uint16_t baud ) {
	/* Ustawienie prêdkoci */
	UBRRH = (uint8_t)(baud>>8);
     c0a:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t)baud;
     c0c:	89 b9       	out	0x09, r24	; 9
	/* Za³¹czenie nadajnika I odbiornika */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     c0e:	88 e1       	ldi	r24, 0x18	; 24
     c10:	8a b9       	out	0x0a, r24	; 10
	/* Ustawienie format ramki: 8bitów danych, 1 bit stopu */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
     c12:	86 e8       	ldi	r24, 0x86	; 134
     c14:	80 bd       	out	0x20, r24	; 32

	// jeli korzystamy z interefejsu RS485
	#ifdef UART_DE_PORT
		// inicjalizujemy liniê steruj¹c¹ nadajnikiem
		UART_DE_DIR |= UART_DE_BIT;
     c16:	8a 9a       	sbi	0x11, 2	; 17
		UART_DE_ODBIERANIE;
     c18:	92 9a       	sbi	0x12, 2	; 18
	#endif

	// jeli korzystamy z interefejsu RS485
	#ifdef UART_DE_PORT
		// jeli korzystamy z interefejsu RS485 za³¹czamy dodatkowe przerwanie TXCIE
		UCSRB |= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
     c1a:	8a b1       	in	r24, 0x0a	; 10
     c1c:	88 6d       	ori	r24, 0xD8	; 216
     c1e:	8a b9       	out	0x0a, r24	; 10
     c20:	08 95       	ret

00000c22 <__vector_13>:
}

// procedura obs³ugi przerwania Tx Complete, gdy zostanie opó¿niony UDR
// kompilacja gdy u¿ywamy RS485
#ifdef UART_DE_PORT
ISR( USART_TXC_vect ) {
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	0f 92       	push	r0
     c2a:	11 24       	eor	r1, r1
  UART_DE_PORT &= ~UART_DE_BIT;	// zablokuj nadajnik RS485
     c2c:	92 98       	cbi	0x12, 2	; 18
}
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	0f 90       	pop	r0
     c34:	1f 90       	pop	r1
     c36:	18 95       	reti

00000c38 <uart_putc>:

// definiujemy funkcjê dodaj¹c¹ jeden bajtdoz bufora cyklicznego
void uart_putc( char data ) {
	uint8_t tmp_head;

    tmp_head  = (UART_TxHead + 1) & UART_TX_BUF_MASK;
     c38:	90 91 17 01 	lds	r25, 0x0117
     c3c:	9f 5f       	subi	r25, 0xFF	; 255
     c3e:	9f 70       	andi	r25, 0x0F	; 15

          // pêtla oczekuje je¿eli brak miejsca w buforze cyklicznym na kolejne znaki
    while ( tmp_head == UART_TxTail ){}
     c40:	20 91 18 01 	lds	r18, 0x0118
     c44:	92 17       	cp	r25, r18
     c46:	e1 f3       	breq	.-8      	; 0xc40 <uart_putc+0x8>

    UART_TxBuf[tmp_head] = data;
     c48:	e9 2f       	mov	r30, r25
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	e7 5e       	subi	r30, 0xE7	; 231
     c4e:	fe 4f       	sbci	r31, 0xFE	; 254
     c50:	80 83       	st	Z, r24
    UART_TxHead = tmp_head;
     c52:	90 93 17 01 	sts	0x0117, r25

    // inicjalizujemy przerwanie wystêpuj¹ce, gdy bufor jest pusty, dziêki
    // czemu w dalszej czêci wysy³aniem danych zajmie siê ju¿ procedura
    // obs³ugi przerwania
    UCSRB |= (1<<UDRIE);
     c56:	55 9a       	sbi	0x0a, 5	; 10
     c58:	08 95       	ret

00000c5a <uart_puts>:
}


void uart_puts(char *s)		// wysy³a ³añcuch z pamiêci RAM na UART
{
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	ec 01       	movw	r28, r24
  register char c;
  while ((c = *s++)) uart_putc(c);			// dopóki nie napotkasz 0 wysy³aj znak
     c60:	89 91       	ld	r24, Y+
     c62:	88 23       	and	r24, r24
     c64:	19 f0       	breq	.+6      	; 0xc6c <uart_puts+0x12>
     c66:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_putc>
     c6a:	fa cf       	rjmp	.-12     	; 0xc60 <uart_puts+0x6>
}
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <uart_putint>:

void uart_putint(int value, int radix)	// wysy³a na port szeregowy tekst
{
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	61 97       	sbiw	r28, 0x11	; 17
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	ab 01       	movw	r20, r22
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
     c88:	be 01       	movw	r22, r28
     c8a:	6f 5f       	subi	r22, 0xFF	; 255
     c8c:	7f 4f       	sbci	r23, 0xFF	; 255
     c8e:	0e 94 4d 0a 	call	0x149a	; 0x149a <itoa>
	char string[17];			// bufor na wynik funkcji itoa
	itoa(value, string, radix);		// konwersja value na ASCII
	uart_puts(string);			// wylij string na port szeregowy
     c92:	ce 01       	movw	r24, r28
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_puts>
}
     c9a:	61 96       	adiw	r28, 0x11	; 17
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <__vector_12>:


// definiujemy procedurê obs³ugi przerwania nadawczego, pobieraj¹c¹ dane z bufora cyklicznego
ISR( USART_UDRE_vect)  {
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
    // sprawdzamy czy indeksy s¹ ró¿ne
    if ( UART_TxHead != UART_TxTail ) {
     cbe:	90 91 17 01 	lds	r25, 0x0117
     cc2:	80 91 18 01 	lds	r24, 0x0118
     cc6:	98 17       	cp	r25, r24
     cc8:	71 f0       	breq	.+28     	; 0xce6 <__vector_12+0x3a>
    	// obliczamy i zapamiêtujemy nowy indeks ogona wê¿a (mo¿e siê zrównaæ z g³ow¹)
    	UART_TxTail = (UART_TxTail + 1) & UART_TX_BUF_MASK;
     cca:	80 91 18 01 	lds	r24, 0x0118
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	8f 70       	andi	r24, 0x0F	; 15
     cd2:	80 93 18 01 	sts	0x0118, r24
    	// zwracamy bajt pobrany z bufora  jako rezultat funkcji
    	UDR = UART_TxBuf[UART_TxTail];
     cd6:	e0 91 18 01 	lds	r30, 0x0118
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	e7 5e       	subi	r30, 0xE7	; 231
     cde:	fe 4f       	sbci	r31, 0xFE	; 254
     ce0:	80 81       	ld	r24, Z
     ce2:	8c b9       	out	0x0c, r24	; 12
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <__vector_12+0x3c>
    } else {
	// zerujemy flagê przerwania wystêpuj¹cego gdy bufor pusty
	UCSRB &= ~(1<<UDRIE);
     ce6:	55 98       	cbi	0x0a, 5	; 10
    }
}
     ce8:	ff 91       	pop	r31
     cea:	ef 91       	pop	r30
     cec:	9f 91       	pop	r25
     cee:	8f 91       	pop	r24
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <uart_getc>:


// definiujemy funkcjê pobieraj¹c¹ jeden bajt z bufora cyklicznego
char uart_getc(void) {
    // sprawdzamy czy indeksy s¹ równe
    if ( UART_RxHead == UART_RxTail ) return 0;
     cfa:	90 91 29 01 	lds	r25, 0x0129
     cfe:	80 91 2a 01 	lds	r24, 0x012A
     d02:	98 17       	cp	r25, r24
     d04:	69 f0       	breq	.+26     	; 0xd20 <uart_getc+0x26>

    // obliczamy i zapamiêtujemy nowy indeks ogona wê¿a (mo¿e siê zrównaæ z g³ow¹)
    UART_RxTail = (UART_RxTail + 1) & UART_RX_BUF_MASK;
     d06:	80 91 2a 01 	lds	r24, 0x012A
     d0a:	8f 5f       	subi	r24, 0xFF	; 255
     d0c:	8f 71       	andi	r24, 0x1F	; 31
     d0e:	80 93 2a 01 	sts	0x012A, r24
    // zwracamy bajt pobrany z bufora  jako rezultat funkcji
    return UART_RxBuf[UART_RxTail];
     d12:	e0 91 2a 01 	lds	r30, 0x012A
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	e5 5d       	subi	r30, 0xD5	; 213
     d1a:	fe 4f       	sbci	r31, 0xFE	; 254
     d1c:	80 81       	ld	r24, Z
     d1e:	08 95       	ret


// definiujemy funkcjê pobieraj¹c¹ jeden bajt z bufora cyklicznego
char uart_getc(void) {
    // sprawdzamy czy indeksy s¹ równe
    if ( UART_RxHead == UART_RxTail ) return 0;
     d20:	80 e0       	ldi	r24, 0x00	; 0

    // obliczamy i zapamiêtujemy nowy indeks ogona wê¿a (mo¿e siê zrównaæ z g³ow¹)
    UART_RxTail = (UART_RxTail + 1) & UART_RX_BUF_MASK;
    // zwracamy bajt pobrany z bufora  jako rezultat funkcji
    return UART_RxBuf[UART_RxTail];
}
     d22:	08 95       	ret

00000d24 <__vector_11>:

// definiujemy procedurê obs³ugi przerwania odbiorczego, zapisuj¹c¹ dane do bufora cyklicznego
ISR( USART_RXC_vect ) {
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
    uint8_t tmp_head;
    char data;

    data = UDR; //pobieramy natychmiast bajt danych z bufora sprzêtowego
     d36:	8c b1       	in	r24, 0x0c	; 12

    // obliczamy nowy indeks g³owy wê¿a
    tmp_head = ( UART_RxHead + 1) & UART_RX_BUF_MASK;
     d38:	e0 91 29 01 	lds	r30, 0x0129
     d3c:	ef 5f       	subi	r30, 0xFF	; 255
     d3e:	ef 71       	andi	r30, 0x1F	; 31

    // sprawdzamy, czy w¹¿ nie zacznie zjadaæ w³asnego ogona
    if ( tmp_head == UART_RxTail ) {
     d40:	90 91 2a 01 	lds	r25, 0x012A
     d44:	e9 17       	cp	r30, r25
     d46:	31 f0       	breq	.+12     	; 0xd54 <__vector_11+0x30>
    	// tutaj mo¿emy w jaki wygodny dla nas sposób obs³u¿yæ  b³¹d spowodowany
    	// prób¹ nadpisania danych w buforze, mog³oby dojæ do sytuacji gdzie
    	// nasz w¹¿ zacz¹³by zjadaæ w³asny ogon
    } else {
	UART_RxHead = tmp_head; 		// zapamiêtujemy nowy indeks
     d48:	e0 93 29 01 	sts	0x0129, r30
	UART_RxBuf[tmp_head] = data; 	// wpisujemy odebrany bajt do bufora
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	e5 5d       	subi	r30, 0xD5	; 213
     d50:	fe 4f       	sbci	r31, 0xFE	; 254
     d52:	80 83       	st	Z, r24
    }
}
     d54:	ff 91       	pop	r31
     d56:	ef 91       	pop	r30
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <ustaw_czas>:
#include "../ext_eeprom/24C64.h"
#include "RTC.h"
		
	 
void ustaw_czas(Czas *czas)
{
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	00 d0       	rcall	.+0      	; 0xd6c <ustaw_czas+0x6>
     d6c:	1f 92       	push	r1
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	fc 01       	movw	r30, r24
	uint8_t bufor[3];
	bufor[0]=czas->sekundy;
     d74:	80 81       	ld	r24, Z
     d76:	89 83       	std	Y+1, r24	; 0x01
	bufor[1]=czas->minuty;
     d78:	81 81       	ldd	r24, Z+1	; 0x01
     d7a:	8a 83       	std	Y+2, r24	; 0x02
	bufor[2]=czas->godziny;
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	8b 83       	std	Y+3, r24	; 0x03
	
	TWI_write_buf( ADDR_PCF8583, SecondsReg, 3, bufor );
     d80:	9e 01       	movw	r18, r28
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	43 e0       	ldi	r20, 0x03	; 3
     d88:	62 e0       	ldi	r22, 0x02	; 2
     d8a:	82 ea       	ldi	r24, 0xA2	; 162
     d8c:	0e 94 32 01 	call	0x264	; 0x264 <TWI_write_buf>
}
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <ustaw_date>:

void ustaw_date(Data *data)
{
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	00 d0       	rcall	.+0      	; 0xda2 <ustaw_date+0x6>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <ustaw_date+0x8>
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	fc 01       	movw	r30, r24
	uint8_t bufor[4];
	bufor[0]=data->dzien;
     daa:	80 81       	ld	r24, Z
     dac:	89 83       	std	Y+1, r24	; 0x01
	bufor[1]=data->dzien_tygodnia;
     dae:	81 81       	ldd	r24, Z+1	; 0x01
     db0:	8a 83       	std	Y+2, r24	; 0x02
	bufor[2]=data->miesiac;
     db2:	82 81       	ldd	r24, Z+2	; 0x02
     db4:	8b 83       	std	Y+3, r24	; 0x03
	bufor[3]=data->rok;
     db6:	83 81       	ldd	r24, Z+3	; 0x03
     db8:	8c 83       	std	Y+4, r24	; 0x04
	
	TWI_write_buf( ADDR_PCF8583, DaysReg, 4, bufor );
     dba:	9e 01       	movw	r18, r28
     dbc:	2f 5f       	subi	r18, 0xFF	; 255
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	44 e0       	ldi	r20, 0x04	; 4
     dc2:	65 e0       	ldi	r22, 0x05	; 5
     dc4:	82 ea       	ldi	r24, 0xA2	; 162
     dc6:	0e 94 32 01 	call	0x264	; 0x264 <TWI_write_buf>
}
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <nadpisz_bufor_spacjami>:
}

//Funkcja pomocnicza

void nadpisz_bufor_spacjami (char *bufor)
{
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	8c 01       	movw	r16, r24
	size_t rozmiar= strlen(bufor);
     de6:	fc 01       	movw	r30, r24
     de8:	01 90       	ld	r0, Z+
     dea:	00 20       	and	r0, r0
     dec:	e9 f7       	brne	.-6      	; 0xde8 <nadpisz_bufor_spacjami+0x10>
     dee:	31 97       	sbiw	r30, 0x01	; 1
     df0:	ef 01       	movw	r28, r30
     df2:	c8 1b       	sub	r28, r24
     df4:	d9 0b       	sbc	r29, r25
	strcpy(bufor, " ");
     df6:	60 ec       	ldi	r22, 0xC0	; 192
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	0e 94 46 0a 	call	0x148c	; 0x148c <strcpy>
	for(size_t i=1; i < rozmiar; i++)
     dfe:	ee 24       	eor	r14, r14
     e00:	e3 94       	inc	r14
     e02:	f1 2c       	mov	r15, r1
     e04:	ec 16       	cp	r14, r28
     e06:	fd 06       	cpc	r15, r29
     e08:	48 f4       	brcc	.+18     	; 0xe1c <nadpisz_bufor_spacjami+0x44>
	{
		strcat(bufor," ");
     e0a:	60 ec       	ldi	r22, 0xC0	; 192
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	c8 01       	movw	r24, r16
     e10:	0e 94 3b 0a 	call	0x1476	; 0x1476 <strcat>

void nadpisz_bufor_spacjami (char *bufor)
{
	size_t rozmiar= strlen(bufor);
	strcpy(bufor, " ");
	for(size_t i=1; i < rozmiar; i++)
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	e8 1a       	sub	r14, r24
     e18:	f8 0a       	sbc	r15, r24
     e1a:	f4 cf       	rjmp	.-24     	; 0xe04 <nadpisz_bufor_spacjami+0x2c>
	{
		strcat(bufor," ");
	}
}
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	08 95       	ret

00000e2a <lcd_wyswietl_date>:
	data->miesiac = bcd2bin(bufor[2]);
	data->rok = bcd2bin(bufor[3]);
}

void lcd_wyswietl_date(Data *data, char *bufor, uint8_t wyl_czesc_daty)
{
     e2a:	9f 92       	push	r9
     e2c:	af 92       	push	r10
     e2e:	bf 92       	push	r11
     e30:	cf 92       	push	r12
     e32:	df 92       	push	r13
     e34:	ef 92       	push	r14
     e36:	ff 92       	push	r15
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	ad 97       	sbiw	r28, 0x2d	; 45
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	5c 01       	movw	r10, r24
     e52:	6b 01       	movw	r12, r22
     e54:	94 2e       	mov	r9, r20
	char dzien_tmp[3];
	char dzien_tygodnia_tmp[17];
	char miesiac_tmp[17];
	char rok_tmp[5], tmp[3];
	
	switch(data->dzien_tygodnia)
     e56:	dc 01       	movw	r26, r24
     e58:	11 96       	adiw	r26, 0x01	; 1
     e5a:	ec 91       	ld	r30, X
     e5c:	8e 2f       	mov	r24, r30
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	87 30       	cpi	r24, 0x07	; 7
     e62:	91 05       	cpc	r25, r1
     e64:	08 f0       	brcs	.+2      	; 0xe68 <lcd_wyswietl_date+0x3e>
     e66:	5b c0       	rjmp	.+182    	; 0xf1e <lcd_wyswietl_date+0xf4>
     e68:	fc 01       	movw	r30, r24
     e6a:	e6 5d       	subi	r30, 0xD6	; 214
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__tablejump2__>
	{
		case PCF_Sunday: 
		{
			EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_Sunday), SIZEOF (EXT_EEPROM_var, eePCF_Sunday), (uint8_t *)dzien_tygodnia_tmp); break;
     e72:	fe 01       	movw	r30, r28
     e74:	72 96       	adiw	r30, 0x12	; 18
     e76:	7f 01       	movw	r14, r30
     e78:	01 e1       	ldi	r16, 0x11	; 17
     e7a:	10 e0       	ldi	r17, 0x00	; 0
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	46 e6       	ldi	r20, 0x66	; 102
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	47 c0       	rjmp	.+142    	; 0xf18 <lcd_wyswietl_date+0xee>
		}
		case PCF_Monday:
		{
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_Monday), SIZEOF (EXT_EEPROM_var, eePCF_Monday), (uint8_t *)dzien_tygodnia_tmp);  break; 
     e8a:	ce 01       	movw	r24, r28
     e8c:	42 96       	adiw	r24, 0x12	; 18
     e8e:	7c 01       	movw	r14, r24
     e90:	01 e1       	ldi	r16, 0x11	; 17
     e92:	10 e0       	ldi	r17, 0x00	; 0
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	47 e7       	ldi	r20, 0x77	; 119
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	3b c0       	rjmp	.+118    	; 0xf18 <lcd_wyswietl_date+0xee>
		}
		case PCF_Tuesday:
		{
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_Tuesday), SIZEOF (EXT_EEPROM_var, eePCF_Tuesday), (uint8_t *)dzien_tygodnia_tmp);  break;
     ea2:	de 01       	movw	r26, r28
     ea4:	52 96       	adiw	r26, 0x12	; 18
     ea6:	7d 01       	movw	r14, r26
     ea8:	01 e1       	ldi	r16, 0x11	; 17
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	48 e8       	ldi	r20, 0x88	; 136
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	2f c0       	rjmp	.+94     	; 0xf18 <lcd_wyswietl_date+0xee>
		}
		case PCF_Wednesday:
		{
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_Wednesday), SIZEOF (EXT_EEPROM_var, eePCF_Wednesday), (uint8_t *)dzien_tygodnia_tmp);  break;
     eba:	fe 01       	movw	r30, r28
     ebc:	72 96       	adiw	r30, 0x12	; 18
     ebe:	7f 01       	movw	r14, r30
     ec0:	01 e1       	ldi	r16, 0x11	; 17
     ec2:	10 e0       	ldi	r17, 0x00	; 0
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	49 e9       	ldi	r20, 0x99	; 153
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	23 c0       	rjmp	.+70     	; 0xf18 <lcd_wyswietl_date+0xee>
		}
		case PCF_Thursday:
		{
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_Thursday), SIZEOF (EXT_EEPROM_var, eePCF_Thursday), (uint8_t *)dzien_tygodnia_tmp);  break;
     ed2:	ce 01       	movw	r24, r28
     ed4:	42 96       	adiw	r24, 0x12	; 18
     ed6:	7c 01       	movw	r14, r24
     ed8:	01 e1       	ldi	r16, 0x11	; 17
     eda:	10 e0       	ldi	r17, 0x00	; 0
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	4a ea       	ldi	r20, 0xAA	; 170
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	17 c0       	rjmp	.+46     	; 0xf18 <lcd_wyswietl_date+0xee>
		}
		case PCF_Friday:
		{
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_Friday), SIZEOF (EXT_EEPROM_var, eePCF_Friday), (uint8_t *)dzien_tygodnia_tmp);  break; 
     eea:	de 01       	movw	r26, r28
     eec:	52 96       	adiw	r26, 0x12	; 18
     eee:	7d 01       	movw	r14, r26
     ef0:	01 e1       	ldi	r16, 0x11	; 17
     ef2:	10 e0       	ldi	r17, 0x00	; 0
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	4b eb       	ldi	r20, 0xBB	; 187
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	0b c0       	rjmp	.+22     	; 0xf18 <lcd_wyswietl_date+0xee>
		}
		case PCF_Saturday:
		{
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_Saturday), SIZEOF (EXT_EEPROM_var, eePCF_Saturday), (uint8_t *)dzien_tygodnia_tmp);  break;
     f02:	fe 01       	movw	r30, r28
     f04:	72 96       	adiw	r30, 0x12	; 18
     f06:	7f 01       	movw	r14, r30
     f08:	01 e1       	ldi	r16, 0x11	; 17
     f0a:	10 e0       	ldi	r17, 0x00	; 0
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	4c ec       	ldi	r20, 0xCC	; 204
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	80 ea       	ldi	r24, 0xA0	; 160
     f1a:	0e 94 ae 00 	call	0x15c	; 0x15c <EI2C_read_buf>
		}
	}
	switch(data->miesiac)
     f1e:	d5 01       	movw	r26, r10
     f20:	12 96       	adiw	r26, 0x02	; 2
     f22:	ec 91       	ld	r30, X
     f24:	8e 2f       	mov	r24, r30
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	fc 01       	movw	r30, r24
     f2a:	31 97       	sbiw	r30, 0x01	; 1
     f2c:	ec 30       	cpi	r30, 0x0C	; 12
     f2e:	f1 05       	cpc	r31, r1
     f30:	08 f0       	brcs	.+2      	; 0xf34 <lcd_wyswietl_date+0x10a>
     f32:	96 c0       	rjmp	.+300    	; 0x1060 <lcd_wyswietl_date+0x236>
     f34:	ef 5c       	subi	r30, 0xCF	; 207
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__tablejump2__>
	{
		case PCF_January:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_January), SIZEOF (EXT_EEPROM_var, eePCF_January), (uint8_t *)miesiac_tmp); break;
     f3c:	fe 01       	movw	r30, r28
     f3e:	31 96       	adiw	r30, 0x01	; 1
     f40:	7f 01       	movw	r14, r30
     f42:	01 e1       	ldi	r16, 0x11	; 17
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	4d ed       	ldi	r20, 0xDD	; 221
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	83 c0       	rjmp	.+262    	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_February:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_February), SIZEOF (EXT_EEPROM_var, eePCF_February), (uint8_t *)miesiac_tmp); break;
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	7c 01       	movw	r14, r24
     f5a:	01 e1       	ldi	r16, 0x11	; 17
     f5c:	10 e0       	ldi	r17, 0x00	; 0
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	4e ee       	ldi	r20, 0xEE	; 238
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	77 c0       	rjmp	.+238    	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_March:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_March), SIZEOF (EXT_EEPROM_var, eePCF_March), (uint8_t *)miesiac_tmp); break;
     f6c:	de 01       	movw	r26, r28
     f6e:	11 96       	adiw	r26, 0x01	; 1
     f70:	7d 01       	movw	r14, r26
     f72:	01 e1       	ldi	r16, 0x11	; 17
     f74:	10 e0       	ldi	r17, 0x00	; 0
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	4f ef       	ldi	r20, 0xFF	; 255
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	6b c0       	rjmp	.+214    	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_April:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_April), SIZEOF (EXT_EEPROM_var, eePCF_April), (uint8_t *)miesiac_tmp); break;
     f84:	fe 01       	movw	r30, r28
     f86:	31 96       	adiw	r30, 0x01	; 1
     f88:	7f 01       	movw	r14, r30
     f8a:	01 e1       	ldi	r16, 0x11	; 17
     f8c:	10 e0       	ldi	r17, 0x00	; 0
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e1       	ldi	r20, 0x10	; 16
     f94:	51 e0       	ldi	r21, 0x01	; 1
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	5f c0       	rjmp	.+190    	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_May:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_May), SIZEOF (EXT_EEPROM_var, eePCF_May), (uint8_t *)miesiac_tmp); break;
     f9c:	ce 01       	movw	r24, r28
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	7c 01       	movw	r14, r24
     fa2:	01 e1       	ldi	r16, 0x11	; 17
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	41 e2       	ldi	r20, 0x21	; 33
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	53 c0       	rjmp	.+166    	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_June:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_June), SIZEOF (EXT_EEPROM_var, eePCF_June), (uint8_t *)miesiac_tmp); break;
     fb4:	de 01       	movw	r26, r28
     fb6:	11 96       	adiw	r26, 0x01	; 1
     fb8:	7d 01       	movw	r14, r26
     fba:	01 e1       	ldi	r16, 0x11	; 17
     fbc:	10 e0       	ldi	r17, 0x00	; 0
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	42 e3       	ldi	r20, 0x32	; 50
     fc4:	51 e0       	ldi	r21, 0x01	; 1
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	47 c0       	rjmp	.+142    	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_July:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_July), SIZEOF (EXT_EEPROM_var, eePCF_July), (uint8_t *)miesiac_tmp); break;
     fcc:	fe 01       	movw	r30, r28
     fce:	31 96       	adiw	r30, 0x01	; 1
     fd0:	7f 01       	movw	r14, r30
     fd2:	01 e1       	ldi	r16, 0x11	; 17
     fd4:	10 e0       	ldi	r17, 0x00	; 0
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	43 e4       	ldi	r20, 0x43	; 67
     fdc:	51 e0       	ldi	r21, 0x01	; 1
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	3b c0       	rjmp	.+118    	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_August:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_August), SIZEOF (EXT_EEPROM_var, eePCF_August), (uint8_t *)miesiac_tmp); break;
     fe4:	ce 01       	movw	r24, r28
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	7c 01       	movw	r14, r24
     fea:	01 e1       	ldi	r16, 0x11	; 17
     fec:	10 e0       	ldi	r17, 0x00	; 0
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	44 e5       	ldi	r20, 0x54	; 84
     ff4:	51 e0       	ldi	r21, 0x01	; 1
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	2f c0       	rjmp	.+94     	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_September:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_September), SIZEOF (EXT_EEPROM_var, eePCF_September), (uint8_t *)miesiac_tmp); break;
     ffc:	de 01       	movw	r26, r28
     ffe:	11 96       	adiw	r26, 0x01	; 1
    1000:	7d 01       	movw	r14, r26
    1002:	01 e1       	ldi	r16, 0x11	; 17
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	45 e6       	ldi	r20, 0x65	; 101
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	23 c0       	rjmp	.+70     	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_October:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_October), SIZEOF (EXT_EEPROM_var, eePCF_October), (uint8_t *)miesiac_tmp); break;
    1014:	fe 01       	movw	r30, r28
    1016:	31 96       	adiw	r30, 0x01	; 1
    1018:	7f 01       	movw	r14, r30
    101a:	01 e1       	ldi	r16, 0x11	; 17
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	46 e7       	ldi	r20, 0x76	; 118
    1024:	51 e0       	ldi	r21, 0x01	; 1
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	17 c0       	rjmp	.+46     	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_November:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_November), SIZEOF (EXT_EEPROM_var, eePCF_November), (uint8_t *)miesiac_tmp); break;
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	7c 01       	movw	r14, r24
    1032:	01 e1       	ldi	r16, 0x11	; 17
    1034:	10 e0       	ldi	r17, 0x00	; 0
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	47 e8       	ldi	r20, 0x87	; 135
    103c:	51 e0       	ldi	r21, 0x01	; 1
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	0b c0       	rjmp	.+22     	; 0x105a <lcd_wyswietl_date+0x230>
		case PCF_December:
				EI2C_read_buf(ADDR_EEMEM_24C64, offsetof(EXT_EEPROM_var, eePCF_December), SIZEOF (EXT_EEPROM_var, eePCF_December), (uint8_t *)miesiac_tmp); break;
    1044:	de 01       	movw	r26, r28
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	7d 01       	movw	r14, r26
    104a:	01 e1       	ldi	r16, 0x11	; 17
    104c:	10 e0       	ldi	r17, 0x00	; 0
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	48 e9       	ldi	r20, 0x98	; 152
    1054:	51 e0       	ldi	r21, 0x01	; 1
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	80 ea       	ldi	r24, 0xA0	; 160
    105c:	0e 94 ae 00 	call	0x15c	; 0x15c <EI2C_read_buf>
	}
	
	itoa(data->dzien, dzien_tmp, 10);
    1060:	f5 01       	movw	r30, r10
    1062:	80 81       	ld	r24, Z
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1064:	4a e0       	ldi	r20, 0x0A	; 10
    1066:	be 01       	movw	r22, r28
    1068:	65 5d       	subi	r22, 0xD5	; 213
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__itoa_ncheck>
	strcpy(rok_tmp, "20");
    1072:	6c eb       	ldi	r22, 0xBC	; 188
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	ce 01       	movw	r24, r28
    1078:	83 96       	adiw	r24, 0x23	; 35
    107a:	0e 94 46 0a 	call	0x148c	; 0x148c <strcpy>
	strcat(rok_tmp, itoa(data->rok, tmp, 10));
    107e:	d5 01       	movw	r26, r10
    1080:	13 96       	adiw	r26, 0x03	; 3
    1082:	8c 91       	ld	r24, X
    1084:	4a e0       	ldi	r20, 0x0A	; 10
    1086:	be 01       	movw	r22, r28
    1088:	68 5d       	subi	r22, 0xD8	; 216
    108a:	7f 4f       	sbci	r23, 0xFF	; 255
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__itoa_ncheck>
    1092:	bc 01       	movw	r22, r24
    1094:	ce 01       	movw	r24, r28
    1096:	83 96       	adiw	r24, 0x23	; 35
    1098:	0e 94 3b 0a 	call	0x1476	; 0x1476 <strcat>
	
	switch(wyl_czesc_daty)
    109c:	b2 e0       	ldi	r27, 0x02	; 2
    109e:	9b 16       	cp	r9, r27
    10a0:	89 f0       	breq	.+34     	; 0x10c4 <lcd_wyswietl_date+0x29a>
    10a2:	b9 15       	cp	r27, r9
    10a4:	30 f0       	brcs	.+12     	; 0x10b2 <lcd_wyswietl_date+0x288>
    10a6:	e1 e0       	ldi	r30, 0x01	; 1
    10a8:	9e 12       	cpse	r9, r30
    10aa:	13 c0       	rjmp	.+38     	; 0x10d2 <lcd_wyswietl_date+0x2a8>
	{
		case 1:
			nadpisz_bufor_spacjami(dzien_tygodnia_tmp); break;
    10ac:	ce 01       	movw	r24, r28
    10ae:	42 96       	adiw	r24, 0x12	; 18
    10b0:	0e c0       	rjmp	.+28     	; 0x10ce <lcd_wyswietl_date+0x2a4>
	
	itoa(data->dzien, dzien_tmp, 10);
	strcpy(rok_tmp, "20");
	strcat(rok_tmp, itoa(data->rok, tmp, 10));
	
	switch(wyl_czesc_daty)
    10b2:	f3 e0       	ldi	r31, 0x03	; 3
    10b4:	9f 16       	cp	r9, r31
    10b6:	49 f0       	breq	.+18     	; 0x10ca <lcd_wyswietl_date+0x2a0>
    10b8:	84 e0       	ldi	r24, 0x04	; 4
    10ba:	98 12       	cpse	r9, r24
    10bc:	0a c0       	rjmp	.+20     	; 0x10d2 <lcd_wyswietl_date+0x2a8>
		case 2:
			nadpisz_bufor_spacjami(dzien_tmp); break;
		case 3:
			nadpisz_bufor_spacjami(miesiac_tmp); break;
		case 4:
			nadpisz_bufor_spacjami(rok_tmp); break;	
    10be:	ce 01       	movw	r24, r28
    10c0:	83 96       	adiw	r24, 0x23	; 35
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <lcd_wyswietl_date+0x2a4>
	switch(wyl_czesc_daty)
	{
		case 1:
			nadpisz_bufor_spacjami(dzien_tygodnia_tmp); break;
		case 2:
			nadpisz_bufor_spacjami(dzien_tmp); break;
    10c4:	ce 01       	movw	r24, r28
    10c6:	8b 96       	adiw	r24, 0x2b	; 43
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <lcd_wyswietl_date+0x2a4>
		case 3:
			nadpisz_bufor_spacjami(miesiac_tmp); break;
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
		case 4:
			nadpisz_bufor_spacjami(rok_tmp); break;	
    10ce:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <nadpisz_bufor_spacjami>
	}
	if (wyl_czesc_daty==3 || wyl_czesc_daty==4)
    10d2:	8d ef       	ldi	r24, 0xFD	; 253
    10d4:	89 0d       	add	r24, r9
	{
		strcpy(bufor, dzien_tmp);
    10d6:	be 01       	movw	r22, r28
		case 3:
			nadpisz_bufor_spacjami(miesiac_tmp); break;
		case 4:
			nadpisz_bufor_spacjami(rok_tmp); break;	
	}
	if (wyl_czesc_daty==3 || wyl_czesc_daty==4)
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	30 f4       	brcc	.+12     	; 0x10e8 <lcd_wyswietl_date+0x2be>
	{
		strcpy(bufor, dzien_tmp);
    10dc:	65 5d       	subi	r22, 0xD5	; 213
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	c6 01       	movw	r24, r12
    10e2:	0e 94 46 0a 	call	0x148c	; 0x148c <strcpy>
    10e6:	10 c0       	rjmp	.+32     	; 0x1108 <lcd_wyswietl_date+0x2de>
		strcat(bufor, " ");
		//sprintf(bufor_,"%s %s %s ", dzien_tmp,  miesiac_tmp, rok_tmp);
	}
	else
	{
		strcpy(bufor, dzien_tygodnia_tmp);
    10e8:	6e 5e       	subi	r22, 0xEE	; 238
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	c6 01       	movw	r24, r12
    10ee:	0e 94 46 0a 	call	0x148c	; 0x148c <strcpy>
		strcat(bufor, ", ");
    10f2:	6f eb       	ldi	r22, 0xBF	; 191
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	c6 01       	movw	r24, r12
    10f8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <strcat>
		strcat(bufor, dzien_tmp);
    10fc:	be 01       	movw	r22, r28
    10fe:	65 5d       	subi	r22, 0xD5	; 213
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	c6 01       	movw	r24, r12
    1104:	0e 94 3b 0a 	call	0x1476	; 0x1476 <strcat>
		strcat(bufor, " ");
    1108:	60 ec       	ldi	r22, 0xC0	; 192
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	c6 01       	movw	r24, r12
    110e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <strcat>
		strcat(bufor, miesiac_tmp);
    1112:	be 01       	movw	r22, r28
    1114:	6f 5f       	subi	r22, 0xFF	; 255
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	c6 01       	movw	r24, r12
    111a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <strcat>
		strcat(bufor, " ");
    111e:	60 ec       	ldi	r22, 0xC0	; 192
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	c6 01       	movw	r24, r12
    1124:	0e 94 3b 0a 	call	0x1476	; 0x1476 <strcat>
		strcat(bufor, rok_tmp);
    1128:	be 01       	movw	r22, r28
    112a:	6d 5d       	subi	r22, 0xDD	; 221
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	c6 01       	movw	r24, r12
    1130:	0e 94 3b 0a 	call	0x1476	; 0x1476 <strcat>
		strcat(bufor, " ");
    1134:	60 ec       	ldi	r22, 0xC0	; 192
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	c6 01       	movw	r24, r12
		//sprintf(bufor,"%s, %s %s %s ", dzien_tygodnia_tmp, dzien_tmp,  miesiac_tmp, rok_tmp);
	}
}
    113a:	ad 96       	adiw	r28, 0x2d	; 45
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	bf 90       	pop	r11
    1158:	af 90       	pop	r10
    115a:	9f 90       	pop	r9
		strcat(bufor, dzien_tmp);
		strcat(bufor, " ");
		strcat(bufor, miesiac_tmp);
		strcat(bufor, " ");
		strcat(bufor, rok_tmp);
		strcat(bufor, " ");
    115c:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <strcat>

00001160 <bcd2bin>:
	{
		strcat(bufor," ");
	}
}

inline uint8_t bcd2bin(uint8_t n) { return ((((n >> 4) & 0x0F) * 10) + (n & 0x0F)); };
    1160:	98 2f       	mov	r25, r24
    1162:	92 95       	swap	r25
    1164:	9f 70       	andi	r25, 0x0F	; 15
    1166:	8f 70       	andi	r24, 0x0F	; 15
    1168:	2a e0       	ldi	r18, 0x0A	; 10
    116a:	92 9f       	mul	r25, r18
    116c:	80 0d       	add	r24, r0
    116e:	11 24       	eor	r1, r1
    1170:	08 95       	ret

00001172 <pobierz_czas>:
	
	TWI_write_buf( ADDR_PCF8583, DaysReg, 4, bufor );
}

void pobierz_czas(Czas *czas)
{
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	00 d0       	rcall	.+0      	; 0x117c <pobierz_czas+0xa>
    117c:	00 d0       	rcall	.+0      	; 0x117e <pobierz_czas+0xc>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	8c 01       	movw	r16, r24
	uint8_t bufor[4];
	
	TWI_read_buf(ADDR_PCF8583, SecondsReg, 3, bufor);
    1184:	9e 01       	movw	r18, r28
    1186:	2f 5f       	subi	r18, 0xFF	; 255
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	43 e0       	ldi	r20, 0x03	; 3
    118c:	62 e0       	ldi	r22, 0x02	; 2
    118e:	82 ea       	ldi	r24, 0xA2	; 162
    1190:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TWI_read_buf>
	czas->sekundy=bcd2bin(bufor[0]);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	0e 94 b0 08 	call	0x1160	; 0x1160 <bcd2bin>
    119a:	f8 01       	movw	r30, r16
    119c:	80 83       	st	Z, r24
	czas->minuty=bcd2bin(bufor[1]);
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	0e 94 b0 08 	call	0x1160	; 0x1160 <bcd2bin>
    11a4:	f8 01       	movw	r30, r16
    11a6:	81 83       	std	Z+1, r24	; 0x01
	czas->godziny=bcd2bin(bufor[2]);
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	0e 94 b0 08 	call	0x1160	; 0x1160 <bcd2bin>
    11ae:	f8 01       	movw	r30, r16
    11b0:	82 83       	std	Z+2, r24	; 0x02
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	08 95       	ret

000011c4 <pobierz_date>:

void pobierz_date(Data *data)
{
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <pobierz_date+0xa>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <pobierz_date+0xc>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	8c 01       	movw	r16, r24
	uint8_t bufor[4];
	
	TWI_read_buf(ADDR_PCF8583, DaysReg, 4, bufor);
    11d6:	9e 01       	movw	r18, r28
    11d8:	2f 5f       	subi	r18, 0xFF	; 255
    11da:	3f 4f       	sbci	r19, 0xFF	; 255
    11dc:	44 e0       	ldi	r20, 0x04	; 4
    11de:	65 e0       	ldi	r22, 0x05	; 5
    11e0:	82 ea       	ldi	r24, 0xA2	; 162
    11e2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TWI_read_buf>
	data->dzien = bcd2bin(bufor[0]);
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	0e 94 b0 08 	call	0x1160	; 0x1160 <bcd2bin>
    11ec:	f8 01       	movw	r30, r16
    11ee:	80 83       	st	Z, r24
	data->dzien_tygodnia = bufor[1];
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	81 83       	std	Z+1, r24	; 0x01
	data->miesiac = bcd2bin(bufor[2]);
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	0e 94 b0 08 	call	0x1160	; 0x1160 <bcd2bin>
    11fa:	f8 01       	movw	r30, r16
    11fc:	82 83       	std	Z+2, r24	; 0x02
	data->rok = bcd2bin(bufor[3]);
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	0e 94 b0 08 	call	0x1160	; 0x1160 <bcd2bin>
    1204:	f8 01       	movw	r30, r16
    1206:	83 83       	std	Z+3, r24	; 0x03
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <bin2bcd>:
		strcat(bufor," ");
	}
}

inline uint8_t bcd2bin(uint8_t n) { return ((((n >> 4) & 0x0F) * 10) + (n & 0x0F)); };
    121a:	6a e0       	ldi	r22, 0x0A	; 10
    121c:	0e 94 07 0a 	call	0x140e	; 0x140e <__udivmodqi4>
    1220:	29 2f       	mov	r18, r25
    1222:	30 e1       	ldi	r19, 0x10	; 16
    1224:	83 9f       	mul	r24, r19
    1226:	c0 01       	movw	r24, r0
    1228:	11 24       	eor	r1, r1
    122a:	82 2b       	or	r24, r18
    122c:	08 95       	ret

0000122e <main>:
	licznik++;
}
#endif	 // _EXT_EEPROM_EMPTY

int main(void)
{	
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	aa 97       	sbiw	r28, 0x2a	; 42
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
	uint8_t menu_func_active=1;
	uint8_t state=0;
	uint32_t cnt=0, offset_cnt=0;
	
	Ustawienia ustawienia;	//Struktura s³u¿¹ca do odczytania ustawieñ z EEPROM
	ustawienia.ustawienia_poczatkowe=0;
    1242:	8a a5       	ldd	r24, Y+42	; 0x2a
    1244:	8e 7f       	andi	r24, 0xFE	; 254
    1246:	8a a7       	std	Y+42, r24	; 0x2a
	//Ustaw PORTB jak wyjcie dla LED:
	DDRB=0xFF;
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;
    124c:	18 ba       	out	0x18, r1	; 24
	Flagi.flaga_klawiatura=1;
    124e:	80 91 0a 01 	lds	r24, 0x010A
    1252:	84 60       	ori	r24, 0x04	; 4
    1254:	80 93 0a 01 	sts	0x010A, r24
	
	//// ustawienia TIMER0, przerwanie co 10us
	OCR0 = 19;
    1258:	83 e1       	ldi	r24, 0x13	; 19
    125a:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= (1<<WGM01);		//Tryb ctc
    125c:	83 b7       	in	r24, 0x33	; 51
    125e:	88 60       	ori	r24, 0x08	; 8
    1260:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS01);			// Preskaler 8
    1262:	83 b7       	in	r24, 0x33	; 51
    1264:	82 60       	ori	r24, 0x02	; 2
    1266:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<OCIE0);
    1268:	89 b7       	in	r24, 0x39	; 57
    126a:	82 60       	ori	r24, 0x02	; 2
    126c:	89 bf       	out	0x39, r24	; 57

	// Przerwanie INT0
	MCUCR |= (1<<ISC01);	// wyzwalanie zboczem opadaj¹cym
    126e:	85 b7       	in	r24, 0x35	; 53
    1270:	82 60       	ori	r24, 0x02	; 2
    1272:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);		// odblokowanie przerwania
    1274:	8b b7       	in	r24, 0x3b	; 59
    1276:	80 64       	ori	r24, 0x40	; 64
    1278:	8b bf       	out	0x3b, r24	; 59
	PORTD |= (1<<PD2);		// podci¹gniêcie pinu INT0 do VCC
    127a:	92 9a       	sbi	0x12, 2	; 18
	
	i2cSetBitrate(400); //Ustaw prêdkoæ i2c na 400kHz
    127c:	60 e9       	ldi	r22, 0x90	; 144
    127e:	71 e0       	ldi	r23, 0x01	; 1
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 02 01 	call	0x204	; 0x204 <i2cSetBitrate>
	lcd_init();
    1288:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_init>

	pobierz_czas(&czas);
    128c:	8b e0       	ldi	r24, 0x0B	; 11
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 b9 08 	call	0x1172	; 0x1172 <pobierz_czas>
	pobierz_date(&data);
    1294:	8e e0       	ldi	r24, 0x0E	; 14
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <pobierz_date>
	sei();
    129c:	78 94       	sei

#if _EXT_EEPROM_EMPTY==0
	char bufor_lcd[41];	//Bufor przechowuj¹cy znaki z pamiêci EEPROM
	uint8_t menu_func_active=1;
	uint8_t state=0;
	uint32_t cnt=0, offset_cnt=0;
    129e:	41 2c       	mov	r4, r1
    12a0:	51 2c       	mov	r5, r1
    12a2:	32 01       	movw	r6, r4
    12a4:	81 2c       	mov	r8, r1
    12a6:	91 2c       	mov	r9, r1
    12a8:	54 01       	movw	r10, r8
#endif // _EXT_EEPROM_EMPTY

#if _EXT_EEPROM_EMPTY==0
	char bufor_lcd[41];	//Bufor przechowuj¹cy znaki z pamiêci EEPROM
	uint8_t menu_func_active=1;
	uint8_t state=0;
    12aa:	d1 2c       	mov	r13, r1
	PORTB=0xFF;
#endif // _EXT_EEPROM_EMPTY

#if _EXT_EEPROM_EMPTY==0
	char bufor_lcd[41];	//Bufor przechowuj¹cy znaki z pamiêci EEPROM
	uint8_t menu_func_active=1;
    12ac:	11 e0       	ldi	r17, 0x01	; 1
#endif	 // _EXT_EEPROM_EMPTY
    while (1) 
    {	
#if _EXT_EEPROM_EMPTY==0
		//eeprom_read_block(&ustawienia, &deafult_flags, sizeof(deafult_flags));
		if (ustawienia.ustawienia_poczatkowe)
    12ae:	8a a5       	ldd	r24, Y+42	; 0x2a
    12b0:	80 ff       	sbrs	r24, 0
    12b2:	23 c0       	rjmp	.+70     	; 0x12fa <main+0xcc>
		{
			eeprom_read_block(&data, &deafult_data, sizeof(deafult_data));
    12b4:	44 e0       	ldi	r20, 0x04	; 4
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	64 e0       	ldi	r22, 0x04	; 4
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	8e e0       	ldi	r24, 0x0E	; 14
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	0e 94 8d 0a 	call	0x151a	; 0x151a <eeprom_read_block>
			eeprom_read_block(&czas, &deafult_czas, sizeof(deafult_czas));
    12c4:	43 e0       	ldi	r20, 0x03	; 3
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	8b e0       	ldi	r24, 0x0B	; 11
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	0e 94 8d 0a 	call	0x151a	; 0x151a <eeprom_read_block>
			ustaw_date(&data);
    12d4:	8e e0       	ldi	r24, 0x0E	; 14
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ustaw_date>
			ustaw_czas(&czas);
    12dc:	8b e0       	ldi	r24, 0x0B	; 11
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	0e 94 b3 06 	call	0xd66	; 0xd66 <ustaw_czas>

			ustawienia.ustawienia_poczatkowe=0;
    12e4:	8a a5       	ldd	r24, Y+42	; 0x2a
    12e6:	8e 7f       	andi	r24, 0xFE	; 254
    12e8:	8a a7       	std	Y+42, r24	; 0x2a
			eeprom_update_block(&ustawienia, &deafult_flags, sizeof(deafult_flags));
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	ce 01       	movw	r24, r28
    12f4:	8a 96       	adiw	r24, 0x2a	; 42
    12f6:	0e 94 9d 0a 	call	0x153a	; 0x153a <eeprom_update_block>
		}
		
		
		switch(state)
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	d8 16       	cp	r13, r24
    12fe:	d9 f0       	breq	.+54     	; 0x1336 <main+0x108>
		{
			case 0:
					key_code=debouncer(KlawiaturaSkan());
    1300:	0e 94 9c 01 	call	0x338	; 0x338 <KlawiaturaSkan>
    1304:	0e 94 cc 01 	call	0x398	; 0x398 <debouncer>
    1308:	80 93 16 01 	sts	0x0116, r24
					if(key_code)
    130c:	88 23       	and	r24, r24
    130e:	31 f1       	breq	.+76     	; 0x135c <main+0x12e>
					{
						state=1;
						cli();
    1310:	f8 94       	cli
						cnt=50000;
						offset_cnt=licznik;
    1312:	40 90 12 01 	lds	r4, 0x0112
    1316:	50 90 13 01 	lds	r5, 0x0113
    131a:	60 90 14 01 	lds	r6, 0x0114
    131e:	70 90 15 01 	lds	r7, 0x0115
						sei();
    1322:	78 94       	sei
					key_code=debouncer(KlawiaturaSkan());
					if(key_code)
					{
						state=1;
						cli();
						cnt=50000;
    1324:	80 e5       	ldi	r24, 0x50	; 80
    1326:	88 2e       	mov	r8, r24
    1328:	83 ec       	ldi	r24, 0xC3	; 195
    132a:	98 2e       	mov	r9, r24
    132c:	a1 2c       	mov	r10, r1
    132e:	b1 2c       	mov	r11, r1
		{
			case 0:
					key_code=debouncer(KlawiaturaSkan());
					if(key_code)
					{
						state=1;
    1330:	dd 24       	eor	r13, r13
    1332:	d3 94       	inc	r13
    1334:	14 c0       	rjmp	.+40     	; 0x135e <main+0x130>
						offset_cnt=licznik;
						sei();
					}
					break;
			case 1:
					key_code=0;
    1336:	10 92 16 01 	sts	0x0116, r1
					if(cnt<=licznik-offset_cnt)
    133a:	80 91 12 01 	lds	r24, 0x0112
    133e:	90 91 13 01 	lds	r25, 0x0113
    1342:	a0 91 14 01 	lds	r26, 0x0114
    1346:	b0 91 15 01 	lds	r27, 0x0115
    134a:	84 19       	sub	r24, r4
    134c:	95 09       	sbc	r25, r5
    134e:	a6 09       	sbc	r26, r6
    1350:	b7 09       	sbc	r27, r7
    1352:	88 15       	cp	r24, r8
    1354:	99 05       	cpc	r25, r9
    1356:	aa 05       	cpc	r26, r10
    1358:	bb 05       	cpc	r27, r11
    135a:	08 f0       	brcs	.+2      	; 0x135e <main+0x130>
    135c:	d1 2c       	mov	r13, r1
						state=0;
					}
					break;
		}
		
		if(Flagi.flaga_klawiatura)
    135e:	80 91 0a 01 	lds	r24, 0x010A
    1362:	82 ff       	sbrs	r24, 2
    1364:	48 c0       	rjmp	.+144    	; 0x13f6 <main+0x1c8>
		{
			if (menu_func_active)
    1366:	11 23       	and	r17, r17
    1368:	11 f1       	breq	.+68     	; 0x13ae <main+0x180>
			{
				if(Flagi.flaga_lcd)
    136a:	80 ff       	sbrs	r24, 0
    136c:	16 c0       	rjmp	.+44     	; 0x139a <main+0x16c>
				{
					EI2C_read_buf(ADDR_EEMEM_24C64, menu_ptr->addr_ext_eeprom, menu_ptr->size_ext_eeprom, (uint8_t *)bufor_lcd);
    136e:	e0 91 60 00 	lds	r30, 0x0060
    1372:	f0 91 61 00 	lds	r31, 0x0061
    1376:	04 85       	ldd	r16, Z+12	; 0x0c
    1378:	15 85       	ldd	r17, Z+13	; 0x0d
    137a:	26 85       	ldd	r18, Z+14	; 0x0e
    137c:	37 85       	ldd	r19, Z+15	; 0x0f
    137e:	40 85       	ldd	r20, Z+8	; 0x08
    1380:	51 85       	ldd	r21, Z+9	; 0x09
    1382:	62 85       	ldd	r22, Z+10	; 0x0a
    1384:	73 85       	ldd	r23, Z+11	; 0x0b
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	7c 01       	movw	r14, r24
    138c:	80 ea       	ldi	r24, 0xA0	; 160
    138e:	0e 94 ae 00 	call	0x15c	; 0x15c <EI2C_read_buf>
					lcd_locate(0, 0);
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_locate>
				}

				(*menu_ptr->funkcja)(bufor_lcd);		//Wskanik na funkcje dla danej pozycji menu
    139a:	e0 91 60 00 	lds	r30, 0x0060
    139e:	f0 91 61 00 	lds	r31, 0x0061
    13a2:	00 88       	ldd	r0, Z+16	; 0x10
    13a4:	f1 89       	ldd	r31, Z+17	; 0x11
    13a6:	e0 2d       	mov	r30, r0
    13a8:	ce 01       	movw	r24, r28
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	09 95       	icall
			}
			
			if (key_code == PRZYCISK_PRAWO)
    13ae:	80 91 16 01 	lds	r24, 0x0116
    13b2:	e0 91 60 00 	lds	r30, 0x0060
    13b6:	f0 91 61 00 	lds	r31, 0x0061
    13ba:	82 32       	cpi	r24, 0x22	; 34
    13bc:	19 f4       	brne	.+6      	; 0x13c4 <main+0x196>
			{
				if(menu_ptr->next!=NULL)
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	0e c0       	rjmp	.+28     	; 0x13e0 <main+0x1b2>
				{
					Flagi.flaga_lcd=1;
					menu_ptr=menu_ptr->next;
				}
			}
			else if (key_code == PRZYCISK_LEWO)
    13c4:	81 32       	cpi	r24, 0x21	; 33
    13c6:	19 f4       	brne	.+6      	; 0x13ce <main+0x1a0>
			{
				if(menu_ptr->prev!=NULL)
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <main+0x1b2>
				{
					Flagi.flaga_lcd=1;
					menu_ptr=menu_ptr->prev;
				}
			}
			else if (key_code == PRZYCISK_DOL)
    13ce:	84 31       	cpi	r24, 0x14	; 20
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <main+0x1aa>
			{
				if(menu_ptr->down!=NULL)
    13d2:	86 81       	ldd	r24, Z+6	; 0x06
    13d4:	97 81       	ldd	r25, Z+7	; 0x07
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <main+0x1b2>
				{
					Flagi.flaga_lcd=1;
					menu_ptr=menu_ptr->down;
				}
			}
			else if (key_code == PRZYCISK_GORA)
    13d8:	84 32       	cpi	r24, 0x24	; 36
    13da:	69 f4       	brne	.+26     	; 0x13f6 <main+0x1c8>
			{
				if(menu_ptr->up!=NULL)
    13dc:	84 81       	ldd	r24, Z+4	; 0x04
    13de:	95 81       	ldd	r25, Z+5	; 0x05
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	49 f0       	breq	.+18     	; 0x13f6 <main+0x1c8>
				{
					Flagi.flaga_lcd=1;
    13e4:	20 91 0a 01 	lds	r18, 0x010A
    13e8:	21 60       	ori	r18, 0x01	; 1
    13ea:	20 93 0a 01 	sts	0x010A, r18
					menu_ptr=menu_ptr->up;
    13ee:	90 93 61 00 	sts	0x0061, r25
    13f2:	80 93 60 00 	sts	0x0060, r24
				}
			}
		}
		
		if(menu_ptr->funkcja!=NULL)
    13f6:	e0 91 60 00 	lds	r30, 0x0060
    13fa:	f0 91 61 00 	lds	r31, 0x0061
    13fe:	11 e0       	ldi	r17, 0x01	; 1
    1400:	80 89       	ldd	r24, Z+16	; 0x10
    1402:	91 89       	ldd	r25, Z+17	; 0x11
    1404:	89 2b       	or	r24, r25
    1406:	09 f0       	breq	.+2      	; 0x140a <main+0x1dc>
    1408:	52 cf       	rjmp	.-348    	; 0x12ae <main+0x80>
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	50 cf       	rjmp	.-352    	; 0x12ae <main+0x80>

0000140e <__udivmodqi4>:
    140e:	99 1b       	sub	r25, r25
    1410:	79 e0       	ldi	r23, 0x09	; 9
    1412:	04 c0       	rjmp	.+8      	; 0x141c <__udivmodqi4_ep>

00001414 <__udivmodqi4_loop>:
    1414:	99 1f       	adc	r25, r25
    1416:	96 17       	cp	r25, r22
    1418:	08 f0       	brcs	.+2      	; 0x141c <__udivmodqi4_ep>
    141a:	96 1b       	sub	r25, r22

0000141c <__udivmodqi4_ep>:
    141c:	88 1f       	adc	r24, r24
    141e:	7a 95       	dec	r23
    1420:	c9 f7       	brne	.-14     	; 0x1414 <__udivmodqi4_loop>
    1422:	80 95       	com	r24
    1424:	08 95       	ret

00001426 <__udivmodsi4>:
    1426:	a1 e2       	ldi	r26, 0x21	; 33
    1428:	1a 2e       	mov	r1, r26
    142a:	aa 1b       	sub	r26, r26
    142c:	bb 1b       	sub	r27, r27
    142e:	fd 01       	movw	r30, r26
    1430:	0d c0       	rjmp	.+26     	; 0x144c <__udivmodsi4_ep>

00001432 <__udivmodsi4_loop>:
    1432:	aa 1f       	adc	r26, r26
    1434:	bb 1f       	adc	r27, r27
    1436:	ee 1f       	adc	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	a2 17       	cp	r26, r18
    143c:	b3 07       	cpc	r27, r19
    143e:	e4 07       	cpc	r30, r20
    1440:	f5 07       	cpc	r31, r21
    1442:	20 f0       	brcs	.+8      	; 0x144c <__udivmodsi4_ep>
    1444:	a2 1b       	sub	r26, r18
    1446:	b3 0b       	sbc	r27, r19
    1448:	e4 0b       	sbc	r30, r20
    144a:	f5 0b       	sbc	r31, r21

0000144c <__udivmodsi4_ep>:
    144c:	66 1f       	adc	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	1a 94       	dec	r1
    1456:	69 f7       	brne	.-38     	; 0x1432 <__udivmodsi4_loop>
    1458:	60 95       	com	r22
    145a:	70 95       	com	r23
    145c:	80 95       	com	r24
    145e:	90 95       	com	r25
    1460:	9b 01       	movw	r18, r22
    1462:	ac 01       	movw	r20, r24
    1464:	bd 01       	movw	r22, r26
    1466:	cf 01       	movw	r24, r30
    1468:	08 95       	ret

0000146a <__tablejump2__>:
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	05 90       	lpm	r0, Z+
    1470:	f4 91       	lpm	r31, Z
    1472:	e0 2d       	mov	r30, r0
    1474:	09 94       	ijmp

00001476 <strcat>:
    1476:	fb 01       	movw	r30, r22
    1478:	dc 01       	movw	r26, r24
    147a:	0d 90       	ld	r0, X+
    147c:	00 20       	and	r0, r0
    147e:	e9 f7       	brne	.-6      	; 0x147a <strcat+0x4>
    1480:	11 97       	sbiw	r26, 0x01	; 1
    1482:	01 90       	ld	r0, Z+
    1484:	0d 92       	st	X+, r0
    1486:	00 20       	and	r0, r0
    1488:	e1 f7       	brne	.-8      	; 0x1482 <strcat+0xc>
    148a:	08 95       	ret

0000148c <strcpy>:
    148c:	fb 01       	movw	r30, r22
    148e:	dc 01       	movw	r26, r24
    1490:	01 90       	ld	r0, Z+
    1492:	0d 92       	st	X+, r0
    1494:	00 20       	and	r0, r0
    1496:	e1 f7       	brne	.-8      	; 0x1490 <strcpy+0x4>
    1498:	08 95       	ret

0000149a <itoa>:
    149a:	45 32       	cpi	r20, 0x25	; 37
    149c:	51 05       	cpc	r21, r1
    149e:	20 f4       	brcc	.+8      	; 0x14a8 <itoa+0xe>
    14a0:	42 30       	cpi	r20, 0x02	; 2
    14a2:	10 f0       	brcs	.+4      	; 0x14a8 <itoa+0xe>
    14a4:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__itoa_ncheck>
    14a8:	fb 01       	movw	r30, r22
    14aa:	10 82       	st	Z, r1
    14ac:	cb 01       	movw	r24, r22
    14ae:	08 95       	ret

000014b0 <__itoa_ncheck>:
    14b0:	bb 27       	eor	r27, r27
    14b2:	4a 30       	cpi	r20, 0x0A	; 10
    14b4:	31 f4       	brne	.+12     	; 0x14c2 <__itoa_ncheck+0x12>
    14b6:	99 23       	and	r25, r25
    14b8:	22 f4       	brpl	.+8      	; 0x14c2 <__itoa_ncheck+0x12>
    14ba:	bd e2       	ldi	r27, 0x2D	; 45
    14bc:	90 95       	com	r25
    14be:	81 95       	neg	r24
    14c0:	9f 4f       	sbci	r25, 0xFF	; 255
    14c2:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__utoa_common>

000014c6 <__utoa_ncheck>:
    14c6:	bb 27       	eor	r27, r27

000014c8 <__utoa_common>:
    14c8:	fb 01       	movw	r30, r22
    14ca:	55 27       	eor	r21, r21
    14cc:	aa 27       	eor	r26, r26
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	aa 1f       	adc	r26, r26
    14d4:	a4 17       	cp	r26, r20
    14d6:	10 f0       	brcs	.+4      	; 0x14dc <__utoa_common+0x14>
    14d8:	a4 1b       	sub	r26, r20
    14da:	83 95       	inc	r24
    14dc:	50 51       	subi	r21, 0x10	; 16
    14de:	b9 f7       	brne	.-18     	; 0x14ce <__utoa_common+0x6>
    14e0:	a0 5d       	subi	r26, 0xD0	; 208
    14e2:	aa 33       	cpi	r26, 0x3A	; 58
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <__utoa_common+0x20>
    14e6:	a9 5d       	subi	r26, 0xD9	; 217
    14e8:	a1 93       	st	Z+, r26
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	79 f7       	brne	.-34     	; 0x14cc <__utoa_common+0x4>
    14ee:	b1 11       	cpse	r27, r1
    14f0:	b1 93       	st	Z+, r27
    14f2:	11 92       	st	Z+, r1
    14f4:	cb 01       	movw	r24, r22
    14f6:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <strrev>

000014fa <strrev>:
    14fa:	dc 01       	movw	r26, r24
    14fc:	fc 01       	movw	r30, r24
    14fe:	67 2f       	mov	r22, r23
    1500:	71 91       	ld	r23, Z+
    1502:	77 23       	and	r23, r23
    1504:	e1 f7       	brne	.-8      	; 0x14fe <strrev+0x4>
    1506:	32 97       	sbiw	r30, 0x02	; 2
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <strrev+0x18>
    150a:	7c 91       	ld	r23, X
    150c:	6d 93       	st	X+, r22
    150e:	70 83       	st	Z, r23
    1510:	62 91       	ld	r22, -Z
    1512:	ae 17       	cp	r26, r30
    1514:	bf 07       	cpc	r27, r31
    1516:	c8 f3       	brcs	.-14     	; 0x150a <strrev+0x10>
    1518:	08 95       	ret

0000151a <eeprom_read_block>:
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22

0000151e <eeprom_read_blraw>:
    151e:	fc 01       	movw	r30, r24
    1520:	e1 99       	sbic	0x1c, 1	; 28
    1522:	fe cf       	rjmp	.-4      	; 0x1520 <eeprom_read_blraw+0x2>
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <eeprom_read_blraw+0x14>
    1526:	ff bb       	out	0x1f, r31	; 31
    1528:	ee bb       	out	0x1e, r30	; 30
    152a:	e0 9a       	sbi	0x1c, 0	; 28
    152c:	31 96       	adiw	r30, 0x01	; 1
    152e:	0d b2       	in	r0, 0x1d	; 29
    1530:	0d 92       	st	X+, r0
    1532:	41 50       	subi	r20, 0x01	; 1
    1534:	50 40       	sbci	r21, 0x00	; 0
    1536:	b8 f7       	brcc	.-18     	; 0x1526 <eeprom_read_blraw+0x8>
    1538:	08 95       	ret

0000153a <eeprom_update_block>:
    153a:	dc 01       	movw	r26, r24
    153c:	a4 0f       	add	r26, r20
    153e:	b5 1f       	adc	r27, r21
    1540:	41 50       	subi	r20, 0x01	; 1
    1542:	50 40       	sbci	r21, 0x00	; 0
    1544:	48 f0       	brcs	.+18     	; 0x1558 <eeprom_update_block+0x1e>
    1546:	cb 01       	movw	r24, r22
    1548:	84 0f       	add	r24, r20
    154a:	95 1f       	adc	r25, r21
    154c:	2e 91       	ld	r18, -X
    154e:	0e 94 ae 0a 	call	0x155c	; 0x155c <eeprom_update_r18>
    1552:	41 50       	subi	r20, 0x01	; 1
    1554:	50 40       	sbci	r21, 0x00	; 0
    1556:	d0 f7       	brcc	.-12     	; 0x154c <eeprom_update_block+0x12>
    1558:	08 95       	ret

0000155a <eeprom_update_byte>:
    155a:	26 2f       	mov	r18, r22

0000155c <eeprom_update_r18>:
    155c:	e1 99       	sbic	0x1c, 1	; 28
    155e:	fe cf       	rjmp	.-4      	; 0x155c <eeprom_update_r18>
    1560:	9f bb       	out	0x1f, r25	; 31
    1562:	8e bb       	out	0x1e, r24	; 30
    1564:	e0 9a       	sbi	0x1c, 0	; 28
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	0d b2       	in	r0, 0x1d	; 29
    156a:	02 16       	cp	r0, r18
    156c:	31 f0       	breq	.+12     	; 0x157a <eeprom_update_r18+0x1e>
    156e:	2d bb       	out	0x1d, r18	; 29
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	e2 9a       	sbi	0x1c, 2	; 28
    1576:	e1 9a       	sbi	0x1c, 1	; 28
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	08 95       	ret

0000157c <_exit>:
    157c:	f8 94       	cli

0000157e <__stop_program>:
    157e:	ff cf       	rjmp	.-2      	; 0x157e <__stop_program>
